{"ast":null,"code":"var _jsxFileName = \"/Users/suyeonkang/Desktop/web development/Project/metta/src/components/theme/theme.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Container } from './themeStyles';\nimport { Title } from '../../style/style';\nimport ProgressBar from '../progressBar/progressBar';\nimport TimerBtn from '../button/TimerBtn';\nimport PlayBtn from '../button/playBtn';\n\nfunction Theme(props) {\n  const {\n    url\n  } = props;\n  const [audio] = useState(new Audio(url));\n  const [playing, setPlaying] = useState(false);\n  const [duration, setDuration] = useState(60);\n  const [currentTime, setCurrentTime] = useState(0); // Play audio\n\n  useEffect(() => {\n    playing ? audio.play() : audio.pause();\n  }, [playing, audio]);\n  useEffect(() => {\n    audio.addEventListener('ended', () => setPlaying(false));\n    return () => {\n      audio.removeEventListener('ended', () => setPlaying(false));\n    };\n  }, [audio]); //Update duration\n\n  useEffect(() => {\n    if (currentTime >= duration) return;\n\n    if (playing) {\n      const token = setTimeout(updateTime, 1000);\n      return function cleanUp() {\n        clearTimeout(token);\n      };\n    }\n  });\n\n  const updateTime = () => {\n    if (playing) setDuration(duration - 1);\n  }; //const updateTime = () => playing && setDuration(duration - 1);\n\n\n  const handleClick = time => setDuration(time);\n\n  const handleToggle = () => setPlaying(!playing);\n\n  audio.ontimeupdate = () => {\n    setCurrentTime(audio.currentTime); // console.log(audio.currentTime);\n    // console.log(Math.ceil(currentTime));\n\n    console.log(currentTime);\n\n    if (currentTime >= duration) {\n      audio.pause();\n      audio.currentTime = 0;\n      setPlaying(false);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    size: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, \"No one save us but ourselves\"), /*#__PURE__*/React.createElement(ProgressBar, {\n    playing: playing,\n    duration: duration,\n    currentTime: currentTime,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(PlayBtn, {\n    playing: playing,\n    onClick: handleToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TimerBtn, {\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }), props.children);\n}\n\nexport default React.memo(Theme);","map":{"version":3,"sources":["/Users/suyeonkang/Desktop/web development/Project/metta/src/components/theme/theme.js"],"names":["React","useState","useEffect","Container","Title","ProgressBar","TimerBtn","PlayBtn","Theme","props","url","audio","Audio","playing","setPlaying","duration","setDuration","currentTime","setCurrentTime","play","pause","addEventListener","removeEventListener","token","setTimeout","updateTime","cleanUp","clearTimeout","handleClick","time","handleToggle","ontimeupdate","console","log","children","memo"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport { Container } from './themeStyles';\nimport { Title } from '../../style/style';\nimport ProgressBar from '../progressBar/progressBar';\nimport TimerBtn from '../button/TimerBtn';\nimport PlayBtn from '../button/playBtn';\n\nfunction Theme(props) {\n  const { url } = props;\n  const [audio] = useState(new Audio(url));\n  const [playing, setPlaying] = useState(false);\n  const [duration, setDuration] = useState(60);\n  const [currentTime, setCurrentTime] = useState(0);\n\n  // Play audio\n  useEffect(() => {\n    playing ? audio.play() : audio.pause();\n  }, [playing, audio]);\n\n  useEffect(() => {\n    audio.addEventListener('ended', () => setPlaying(false));\n    return () => {\n      audio.removeEventListener('ended', () => setPlaying(false));\n    };\n  }, [audio]);\n\n  //Update duration\n  useEffect(() => {\n    if (currentTime >= duration) return;\n    if (playing) {\n      const token = setTimeout(updateTime, 1000);\n\n      return function cleanUp() {\n        clearTimeout(token);\n      };\n    }\n  });\n\n  const updateTime = () => {\n    if (playing) setDuration(duration - 1);\n  };\n  //const updateTime = () => playing && setDuration(duration - 1);\n  const handleClick = time => setDuration(time);\n  const handleToggle = () => setPlaying(!playing);\n\n  audio.ontimeupdate = () => {\n    setCurrentTime(audio.currentTime);\n    // console.log(audio.currentTime);\n    // console.log(Math.ceil(currentTime));\n    console.log(currentTime);\n\n    if (currentTime >= duration) {\n      audio.pause();\n      audio.currentTime = 0;\n      setPlaying(false);\n    }\n  };\n\n  return (\n    <Container>\n      <Title size=\"md\">No one save us but ourselves</Title>\n      <ProgressBar\n        playing={playing}\n        duration={duration}\n        currentTime={currentTime}\n      />\n      <PlayBtn playing={playing} onClick={handleToggle} />\n      <TimerBtn onClick={handleClick} />\n      {props.children}\n    </Container>\n  );\n}\n\nexport default React.memo(Theme);\n"]},"metadata":{},"sourceType":"module"}