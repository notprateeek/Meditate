{"ast":null,"code":"var _jsxFileName = \"/Users/suyeonkang/Desktop/web development/Project/metta/src/containers/Theme/Theme.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { Container } from './ThemeStyles';\nimport ProgressBar from '../../components/ProgressBar/ProgressBar';\nimport TimerBtn from '../../components/Button/TimerBtn';\nimport PlayBtn from '../../components/Button/PlayBtn';\nimport DynamicText from '../../components/DynamicText/DynamicText';\n\nfunction Theme(props) {\n  const {\n    url\n  } = props;\n  const [audio] = useState(new Audio(url));\n  const [playing, setPlaying] = useState(false);\n  const [duration, setDuration] = useState(5);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [didMount, setDidMount] = useState(false); // useEffect(() => {\n  //   audio.ontimeupdate = () => {\n  //     setCurrentTime(audio.currentTime);\n  //     // if (currentTime > duration) {\n  //     //   audio.pause();\n  //     //   audio.currentTime = 0;\n  //     //   setPlaying(false);\n  //     // }\n  //     //console.log(audio.currentTime);\n  //     //console.log(currentTime);\n  //   };\n  //   return () => {\n  //     //audio.pause();\n  //     //audio.currentTime = 0;\n  //     //setPlaying(false);\n  //   };\n  // });\n\n  useEffect(() => {\n    audio.addEventListener('timeupdate', () => setCurrentTime(audio.currentTime));\n    return () => audio.removeEventListener('timeupdate');\n  }, [audio]); // useEffect(() => {\n  //   console.log('MOUNT');\n  //   return () => console.log('UNMOUNT');\n  // }, []);\n  // Play audio\n\n  useEffect(() => {\n    playing ? audio.play() : audio.pause();\n    return () => {\n      audio.pause();\n    };\n  }, [playing, audio]);\n  useEffect(() => {\n    audio.addEventListener('ended', () => setPlaying(false));\n    return () => {\n      audio.removeEventListener('ended', () => setPlaying(false));\n    };\n  }, [audio]); //Update duration\n\n  useEffect(() => {\n    if (playing) {\n      const token = setTimeout(updateTime, 1000);\n      return function cleanUp() {\n        clearTimeout(token);\n      };\n    }\n  });\n\n  const handleClick = time => setDuration(time);\n\n  const handleToggle = () => setPlaying(!playing);\n\n  const updateTime = () => {\n    if (playing) setDuration(duration - 1);\n  };\n\n  if (currentTime >= duration) {\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/congraturation\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DynamicText, {\n    playing: playing,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ProgressBar, {\n    playing: playing,\n    duration: duration,\n    currentTime: Math.floor(currentTime),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(PlayBtn, {\n    playing: playing,\n    onClick: handleToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TimerBtn, {\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }), props.children);\n}\n\nexport default React.memo(Theme); // function Theme(props) {\n//   const { url } = props;\n//   const [audio] = useState(new Audio(url));\n//   const [playing, setPlaying] = useState(false);\n//   const [duration, setDuration] = useState(5);\n//   const [currentTime, setCurrentTime] = useState(0);\n//   useEffect(() => {\n//     console.log('MOUNT');\n//     return () => console.log('UNMOUNT');\n//   }, []);\n//   // Play audio\n//   useEffect(() => {\n//     playing ? audio.play() : audio.pause();\n//     return () => {\n//       audio.pause();\n//     };\n//   }, [playing, audio]);\n//   useEffect(() => {\n//     audio.addEventListener('ended', () => setPlaying(false));\n//     return () => {\n//       audio.removeEventListener('ended', () => setPlaying(false));\n//     };\n//   }, [audio]);\n//   //Update duration\n//   useEffect(() => {\n//     if (playing) {\n//       const token = setTimeout(updateTime, 1000);\n//       return function cleanUp() {\n//         clearTimeout(token);\n//       };\n//     }\n//   });\n//   const handleClick = time => setDuration(time);\n//   const handleToggle = () => setPlaying(!playing);\n//   const updateTime = () => {\n//     if (playing) setDuration(duration - 1);\n//   };\n//   // HERE Warging!\n//   useEffect(() => {\n//     audio.ontimeupdate = () => {\n//       setCurrentTime(audio.currentTime);\n//       // if (currentTime > duration) {\n//       //   audio.pause();\n//       //   audio.currentTime = 0;\n//       //   setPlaying(false);\n//       // }\n//       //console.log(audio.currentTime);\n//       //console.log(currentTime);\n//     };\n//     return () => {\n//       //audio.pause();\n//       //audio.currentTime = 0;\n//       //setPlaying(false);\n//     };\n//   });\n//   if (currentTime >= duration) {\n//     return <Redirect to=\"/congraturation\" />;\n//   }\n//   // if (currentTime > duration) {\n//   //   audio.pause();\n//   //   audio.currentTime = 0;\n//   //   setPlaying(false);\n//   // }\n//   return (\n//     <Container>\n//       <DynamicText playing={playing} />\n//       <ProgressBar\n//         playing={playing}\n//         duration={duration}\n//         currentTime={Math.floor(currentTime)}\n//       />\n//       <PlayBtn playing={playing} onClick={handleToggle} />\n//       <TimerBtn onClick={handleClick} />\n//       {props.children}\n//     </Container>\n//   );\n// }\n// export default React.memo(Theme);","map":{"version":3,"sources":["/Users/suyeonkang/Desktop/web development/Project/metta/src/containers/Theme/Theme.js"],"names":["React","useState","useEffect","Redirect","Container","ProgressBar","TimerBtn","PlayBtn","DynamicText","Theme","props","url","audio","Audio","playing","setPlaying","duration","setDuration","currentTime","setCurrentTime","didMount","setDidMount","addEventListener","removeEventListener","play","pause","token","setTimeout","updateTime","cleanUp","clearTimeout","handleClick","time","handleToggle","Math","floor","children","memo"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Redirect } from 'react-router-dom';\n\nimport { Container } from './ThemeStyles';\nimport ProgressBar from '../../components/ProgressBar/ProgressBar';\nimport TimerBtn from '../../components/Button/TimerBtn';\nimport PlayBtn from '../../components/Button/PlayBtn';\n\nimport DynamicText from '../../components/DynamicText/DynamicText';\n\nfunction Theme(props) {\n  const { url } = props;\n  const [audio] = useState(new Audio(url));\n  const [playing, setPlaying] = useState(false);\n  const [duration, setDuration] = useState(5);\n  const [currentTime, setCurrentTime] = useState(0);\n\n  const [didMount, setDidMount] = useState(false);\n\n  // useEffect(() => {\n  //   audio.ontimeupdate = () => {\n  //     setCurrentTime(audio.currentTime);\n  //     // if (currentTime > duration) {\n  //     //   audio.pause();\n  //     //   audio.currentTime = 0;\n  //     //   setPlaying(false);\n  //     // }\n  //     //console.log(audio.currentTime);\n  //     //console.log(currentTime);\n  //   };\n\n  //   return () => {\n  //     //audio.pause();\n  //     //audio.currentTime = 0;\n  //     //setPlaying(false);\n  //   };\n  // });\n\n  useEffect(() => {\n    audio.addEventListener('timeupdate', () =>\n      setCurrentTime(audio.currentTime)\n    );\n    return () => audio.removeEventListener('timeupdate');\n  }, [audio]);\n\n  // useEffect(() => {\n  //   console.log('MOUNT');\n  //   return () => console.log('UNMOUNT');\n  // }, []);\n\n  // Play audio\n  useEffect(() => {\n    playing ? audio.play() : audio.pause();\n\n    return () => {\n      audio.pause();\n    };\n  }, [playing, audio]);\n\n  useEffect(() => {\n    audio.addEventListener('ended', () => setPlaying(false));\n    return () => {\n      audio.removeEventListener('ended', () => setPlaying(false));\n    };\n  }, [audio]);\n\n  //Update duration\n  useEffect(() => {\n    if (playing) {\n      const token = setTimeout(updateTime, 1000);\n\n      return function cleanUp() {\n        clearTimeout(token);\n      };\n    }\n  });\n\n  const handleClick = time => setDuration(time);\n  const handleToggle = () => setPlaying(!playing);\n  const updateTime = () => {\n    if (playing) setDuration(duration - 1);\n  };\n\n  if (currentTime >= duration) {\n    return <Redirect to=\"/congraturation\" />;\n  }\n\n  return (\n    <Container>\n      <DynamicText playing={playing} />\n      <ProgressBar\n        playing={playing}\n        duration={duration}\n        currentTime={Math.floor(currentTime)}\n      />\n      <PlayBtn playing={playing} onClick={handleToggle} />\n      <TimerBtn onClick={handleClick} />\n      {props.children}\n    </Container>\n  );\n}\n\nexport default React.memo(Theme);\n\n// function Theme(props) {\n//   const { url } = props;\n//   const [audio] = useState(new Audio(url));\n//   const [playing, setPlaying] = useState(false);\n//   const [duration, setDuration] = useState(5);\n//   const [currentTime, setCurrentTime] = useState(0);\n\n//   useEffect(() => {\n//     console.log('MOUNT');\n//     return () => console.log('UNMOUNT');\n//   }, []);\n\n//   // Play audio\n//   useEffect(() => {\n//     playing ? audio.play() : audio.pause();\n\n//     return () => {\n//       audio.pause();\n//     };\n//   }, [playing, audio]);\n\n//   useEffect(() => {\n//     audio.addEventListener('ended', () => setPlaying(false));\n//     return () => {\n//       audio.removeEventListener('ended', () => setPlaying(false));\n//     };\n//   }, [audio]);\n\n//   //Update duration\n//   useEffect(() => {\n//     if (playing) {\n//       const token = setTimeout(updateTime, 1000);\n\n//       return function cleanUp() {\n//         clearTimeout(token);\n//       };\n//     }\n//   });\n\n//   const handleClick = time => setDuration(time);\n//   const handleToggle = () => setPlaying(!playing);\n//   const updateTime = () => {\n//     if (playing) setDuration(duration - 1);\n//   };\n\n//   // HERE Warging!\n\n//   useEffect(() => {\n//     audio.ontimeupdate = () => {\n//       setCurrentTime(audio.currentTime);\n//       // if (currentTime > duration) {\n//       //   audio.pause();\n//       //   audio.currentTime = 0;\n//       //   setPlaying(false);\n//       // }\n//       //console.log(audio.currentTime);\n//       //console.log(currentTime);\n//     };\n\n//     return () => {\n//       //audio.pause();\n//       //audio.currentTime = 0;\n//       //setPlaying(false);\n//     };\n//   });\n\n//   if (currentTime >= duration) {\n//     return <Redirect to=\"/congraturation\" />;\n//   }\n\n//   // if (currentTime > duration) {\n//   //   audio.pause();\n//   //   audio.currentTime = 0;\n//   //   setPlaying(false);\n//   // }\n\n//   return (\n//     <Container>\n//       <DynamicText playing={playing} />\n//       <ProgressBar\n//         playing={playing}\n//         duration={duration}\n//         currentTime={Math.floor(currentTime)}\n//       />\n//       <PlayBtn playing={playing} onClick={handleToggle} />\n//       <TimerBtn onClick={handleClick} />\n//       {props.children}\n//     </Container>\n//   );\n// }\n\n// export default React.memo(Theme);\n"]},"metadata":{},"sourceType":"module"}