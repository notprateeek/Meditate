{"ast":null,"code":"var _jsxFileName = \"/Users/suyeonkang/Desktop/web development/Project/metta/src/containers/Theme/Theme.js\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Container } from './ThemeStyles';\nimport ProgressBar from '../../components/ProgressBar/ProgressBar';\nimport TimerBtn from '../../components/Button/TimerBtn';\nimport PlayBtn from '../../components/Button/PlayBtn';\nimport DynamicText from '../../components/DynamicText/DynamicText';\n\nfunction Theme(props) {\n  const {\n    url,\n    theme,\n    bg\n  } = props;\n  const [audio] = useState(new Audio(url));\n  const [playing, setPlaying] = useState(false);\n  const [duration, setDuration] = useState(360);\n  const [currentTime, setCurrentTime] = useState(0);\n  const handleClick = useCallback(time => setDuration(time), []);\n  const handleToggle = useCallback(() => setPlaying(!playing), [playing]);\n\n  const updateTime = () => {\n    if (playing) setDuration(duration - 1);\n  };\n\n  const updateCurrentTime = useCallback(() => setCurrentTime(audio.currentTime), [audio.currentTime]); // Audio\n\n  useEffect(() => {\n    audio.addEventListener('timeupdate', updateCurrentTime);\n    return () => audio.removeEventListener('timeupdate', updateCurrentTime);\n  }, [audio, updateCurrentTime]);\n  useEffect(() => {\n    playing ? audio.play() : audio.pause();\n    return () => {\n      audio.pause();\n    };\n  }, [playing, audio]); // Timer\n\n  useEffect(() => {\n    if (playing) {\n      const token = setTimeout(updateTime, 1000);\n      return function cleanUp() {\n        clearTimeout(token);\n      };\n    }\n  });\n\n  if (currentTime >= duration) {\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/congraturation\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(Container, {\n    bg: bg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DynamicText, {\n    playing: playing,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ProgressBar, {\n    playing: playing,\n    duration: duration,\n    currentTime: Math.floor(currentTime),\n    theme: theme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(PlayBtn, {\n    playing: playing,\n    onClick: handleToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TimerBtn, {\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }), props.children);\n}\n\nTheme.propTypes = {\n  url: PropTypes.string,\n  theme: PropTypes.string,\n  bg: PropTypes.string\n};\nexport default React.memo(Theme); // import React, { useState, useEffect, useCallback } from 'react';\n// import { Redirect } from 'react-router-dom';\n// import { Container } from './ThemeStyles';\n// import ProgressBar from '../../components/ProgressBar/ProgressBar';\n// import TimerBtn from '../../components/Button/TimerBtn';\n// import PlayBtn from '../../components/Button/PlayBtn';\n// import DynamicText from '../../components/DynamicText/DynamicText';\n// function Theme(props) {\n//   const { url, theme } = props;\n//   const [audio] = useState(new Audio(url));\n//   const [playing, setPlaying] = useState(false);\n//   const [duration, setDuration] = useState(360);\n//   const [currentTime, setCurrentTime] = useState(0);\n//   const handleClick = useCallback(time => setDuration(time), []);\n//   const handleToggle = useCallback(() => setPlaying(!playing), [playing]);\n//   const updateTime = () => {\n//     if (playing) setDuration(duration - 1);\n//   };\n//   const updateCurrentTime = useCallback(\n//     () => setCurrentTime(audio.currentTime),\n//     [audio.currentTime]\n//   );\n//   // Audio\n//   useEffect(() => {\n//     audio.addEventListener('timeupdate', updateCurrentTime);\n//     return () => audio.removeEventListener('timeupdate', updateCurrentTime);\n//   }, [audio, updateCurrentTime]);\n//   useEffect(() => {\n//     playing ? audio.play() : audio.pause();\n//     return () => {\n//       audio.pause();\n//     };\n//   }, [playing, audio]);\n//   // Timer\n//   useEffect(() => {\n//     if (playing) {\n//       const token = setTimeout(updateTime, 1000);\n//       return function cleanUp() {\n//         clearTimeout(token);\n//       };\n//     }\n//   });\n//   if (currentTime >= duration) {\n//     return <Redirect to=\"/congraturation\" />;\n//   }\n//   return (\n//     <Container>\n//       <DynamicText playing={playing} />\n//       <ProgressBar\n//         playing={playing}\n//         duration={duration}\n//         currentTime={Math.floor(currentTime)}\n//         theme={theme}\n//       />\n//       <PlayBtn playing={playing} onClick={handleToggle} />\n//       <TimerBtn onClick={handleClick} />\n//       {props.children}\n//     </Container>\n//   );\n// }\n// export default React.memo(Theme);","map":{"version":3,"sources":["/Users/suyeonkang/Desktop/web development/Project/metta/src/containers/Theme/Theme.js"],"names":["React","useState","useEffect","useCallback","Redirect","PropTypes","Container","ProgressBar","TimerBtn","PlayBtn","DynamicText","Theme","props","url","theme","bg","audio","Audio","playing","setPlaying","duration","setDuration","currentTime","setCurrentTime","handleClick","time","handleToggle","updateTime","updateCurrentTime","addEventListener","removeEventListener","play","pause","token","setTimeout","cleanUp","clearTimeout","Math","floor","children","propTypes","string","memo"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { Container } from './ThemeStyles';\nimport ProgressBar from '../../components/ProgressBar/ProgressBar';\nimport TimerBtn from '../../components/Button/TimerBtn';\nimport PlayBtn from '../../components/Button/PlayBtn';\n\nimport DynamicText from '../../components/DynamicText/DynamicText';\n\nfunction Theme(props) {\n  const { url, theme, bg } = props;\n  const [audio] = useState(new Audio(url));\n  const [playing, setPlaying] = useState(false);\n  const [duration, setDuration] = useState(360);\n  const [currentTime, setCurrentTime] = useState(0);\n\n  const handleClick = useCallback(time => setDuration(time), []);\n  const handleToggle = useCallback(() => setPlaying(!playing), [playing]);\n\n  const updateTime = () => {\n    if (playing) setDuration(duration - 1);\n  };\n\n  const updateCurrentTime = useCallback(\n    () => setCurrentTime(audio.currentTime),\n    [audio.currentTime]\n  );\n\n  // Audio\n  useEffect(() => {\n    audio.addEventListener('timeupdate', updateCurrentTime);\n\n    return () => audio.removeEventListener('timeupdate', updateCurrentTime);\n  }, [audio, updateCurrentTime]);\n\n  useEffect(() => {\n    playing ? audio.play() : audio.pause();\n\n    return () => {\n      audio.pause();\n    };\n  }, [playing, audio]);\n\n  // Timer\n  useEffect(() => {\n    if (playing) {\n      const token = setTimeout(updateTime, 1000);\n\n      return function cleanUp() {\n        clearTimeout(token);\n      };\n    }\n  });\n\n  if (currentTime >= duration) {\n    return <Redirect to=\"/congraturation\" />;\n  }\n\n  return (\n    <Container bg={bg}>\n      <DynamicText playing={playing} />\n      <ProgressBar\n        playing={playing}\n        duration={duration}\n        currentTime={Math.floor(currentTime)}\n        theme={theme}\n      />\n      <PlayBtn playing={playing} onClick={handleToggle} />\n      <TimerBtn onClick={handleClick} />\n      {props.children}\n    </Container>\n  );\n}\n\nTheme.propTypes = {\n  url: PropTypes.string,\n  theme: PropTypes.string,\n  bg: PropTypes.string,\n};\n\nexport default React.memo(Theme);\n\n// import React, { useState, useEffect, useCallback } from 'react';\n// import { Redirect } from 'react-router-dom';\n\n// import { Container } from './ThemeStyles';\n// import ProgressBar from '../../components/ProgressBar/ProgressBar';\n// import TimerBtn from '../../components/Button/TimerBtn';\n// import PlayBtn from '../../components/Button/PlayBtn';\n\n// import DynamicText from '../../components/DynamicText/DynamicText';\n\n// function Theme(props) {\n//   const { url, theme } = props;\n//   const [audio] = useState(new Audio(url));\n//   const [playing, setPlaying] = useState(false);\n//   const [duration, setDuration] = useState(360);\n//   const [currentTime, setCurrentTime] = useState(0);\n\n//   const handleClick = useCallback(time => setDuration(time), []);\n//   const handleToggle = useCallback(() => setPlaying(!playing), [playing]);\n\n//   const updateTime = () => {\n//     if (playing) setDuration(duration - 1);\n//   };\n\n//   const updateCurrentTime = useCallback(\n//     () => setCurrentTime(audio.currentTime),\n//     [audio.currentTime]\n//   );\n\n//   // Audio\n//   useEffect(() => {\n//     audio.addEventListener('timeupdate', updateCurrentTime);\n\n//     return () => audio.removeEventListener('timeupdate', updateCurrentTime);\n//   }, [audio, updateCurrentTime]);\n\n//   useEffect(() => {\n//     playing ? audio.play() : audio.pause();\n\n//     return () => {\n//       audio.pause();\n//     };\n//   }, [playing, audio]);\n\n//   // Timer\n//   useEffect(() => {\n//     if (playing) {\n//       const token = setTimeout(updateTime, 1000);\n\n//       return function cleanUp() {\n//         clearTimeout(token);\n//       };\n//     }\n//   });\n\n//   if (currentTime >= duration) {\n//     return <Redirect to=\"/congraturation\" />;\n//   }\n\n//   return (\n//     <Container>\n//       <DynamicText playing={playing} />\n//       <ProgressBar\n//         playing={playing}\n//         duration={duration}\n//         currentTime={Math.floor(currentTime)}\n//         theme={theme}\n//       />\n//       <PlayBtn playing={playing} onClick={handleToggle} />\n//       <TimerBtn onClick={handleClick} />\n//       {props.children}\n//     </Container>\n//   );\n// }\n\n// export default React.memo(Theme);\n"]},"metadata":{},"sourceType":"module"}