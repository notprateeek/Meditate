{"ast":null,"code":"var _jsxFileName = \"/Users/suyeonkang/Desktop/web development/Project/metta/src/components/theme/theme.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Container } from './themeStyles';\nimport { Title, FlexColDiv } from '../../style/style';\nimport ProgressBar from '../progressBar/progressBar';\nimport TimerBtn from '../button/TimerBtn';\nimport PlayBtn from '../button/playBtn'; // Container\n\nfunction Theme(props) {\n  const {\n    url\n  } = props;\n  const [audio] = useState(new Audio(url));\n  const [playing, setPlaying] = useState(false);\n  const [duration, setDuration] = useState(60);\n  const currentTime = audio.currentTime;\n  let elapsed = duration - currentTime; // Play audio\n\n  useEffect(() => {\n    playing ? audio.play() : audio.pause();\n  }, [playing, audio]);\n  useEffect(() => {\n    audio.addEventListener('ended', () => setPlaying(false));\n    return () => {\n      audio.removeEventListener('ended', () => setPlaying(false));\n    };\n  }, [audio]); // Update duration\n\n  useEffect(() => {\n    if (currentTime > duration) return;\n\n    if (playing) {\n      const token = setTimeout(updateTime, 1000);\n      console.log('[useEffect]');\n      return function cleanUp() {\n        clearTimeout(token);\n      };\n    }\n  });\n  console.log('duration: ' + duration);\n\n  const updateTime = () => {\n    if (playing) setDuration(duration - 1);\n    console.log('[updateTime]');\n  };\n\n  const handleClick = time => setDuration(time);\n\n  const handleToggle = () => setPlaying(!playing);\n\n  audio.ontimeupdate = () => {\n    if (currentTime >= duration) {\n      audio.pause();\n      audio.currentTime = 0;\n      setPlaying(false);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    size: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, \"No one save us but ourselves\"), /*#__PURE__*/React.createElement(ProgressBar, {\n    playing: playing,\n    duration: duration,\n    currentTime: currentTime,\n    elapsed: elapsed,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(FlexColDiv, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(PlayBtn, {\n    playing: playing,\n    onClick: handleToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TimerBtn, {\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  })), props.children);\n} // SEcond\n// const Player = ({ setStart, playing, toggle }) => {\n//   const handleClick = () => {\n//     toggle();\n//     setStart();\n//   };\n//   return <PlayBtn onClick={handleClick} playing={playing} />;\n// };\n// function Theme(props) {\n//   const { url } = props;\n//   // Audio\n//   const [audio] = useState(new Audio(url));\n//   const [playing, setPlaying] = useState(false);\n//   const [start, setStart] = useState(false);\n//   const [duration, setDuration] = useState({ min: 60, sec: 0 });\n//   const { min, sec } = duration;\n//   const currentTime = audio.currentTime;\n//   let elapsed = min - currentTime;\n//   useEffect(() => {\n//     playing ? audio.play() : audio.pause();\n//   }, [playing, audio]);\n//   useEffect(() => {\n//     audio.addEventListener('ended', () => setPlaying(false));\n//     return () => {\n//       audio.removeEventListener('ended', () => setPlaying(false));\n//     };\n//   }, [audio]);\n//   const toggle = () => setPlaying(!playing);\n//   audio.ontimeupdate = () => {\n//     if (currentTime >= min) {\n//       audio.pause();\n//       audio.currentTime = 0;\n//       setPlaying(false);\n//     }\n//   };\n//   /////\n//   const displayTime = `${Math.floor(min / 60)}:${Math.floor(sec % 60)}`;\n//   const handleClick = time => {\n//     setDuration({ min: time, sec: 0 });\n//   };\n//   const handleToggle = () => {\n//     setStart(!start);\n//   };\n//   const updateTime = () => {\n//     if (start) {\n//       if (sec === 0) {\n//         setDuration({\n//           min: min - 1,\n//           sec: 59,\n//         });\n//       } else {\n//         setDuration({ ...duration, sec: sec - 1 });\n//       }\n//     }\n//   };\n//   useEffect(() => {\n//     if (start) {\n//       const token = setTimeout(updateTime, 1000);\n//       return function cleanUp() {\n//         clearTimeout(token);\n//       };\n//     }\n//   });\n//   return (\n//     <Container>\n//       <Title size=\"md\">No one save us but ourselves</Title>\n//       <ProgressBar\n//         duration={min}\n//         displayTime={displayTime}\n//         currentTime={currentTime}\n//         start={start}\n//       />\n//       <FlexColDiv>\n//         <Player\n//           url={url}\n//           setStart={handleToggle}\n//           toggle={toggle}\n//           playing={playing}\n//         />\n//         <TimerBtn onClick={handleClick} />\n//       </FlexColDiv>\n//       {props.children}\n//     </Container>\n//   );\n// }\n// Original\n// function Theme(props) {\n//   const { url } = props;\n//   const [start, setStart] = useState(false);\n//   const [duration, setDuration] = useState({ min: 600, sec: 0 });\n//   const { min, sec } = duration;\n//   const displayTime = `${Math.floor(min / 60)}:${Math.floor(sec % 60)}`;\n//   const handleClick = time => {\n//     setDuration({ min: time, sec: 0 });\n//   };\n//   const handleToggle = () => {\n//     setStart(!start);\n//   };\n//   const updateTime = () => {\n//     if (start) {\n//       if (sec === 0) {\n//         setDuration({\n//           min: min - 1,\n//           sec: 59,\n//         });\n//       } else {\n//         setDuration({ ...duration, sec: sec - 1 });\n//       }\n//     }\n//   };\n//   useEffect(() => {\n//     if (start) {\n//       const token = setTimeout(updateTime, 1000);\n//       return function cleanUp() {\n//         clearTimeout(token);\n//       };\n//     }\n//   });\n//   return (\n//     <Container>\n//       <Title size=\"md\">No one save us but ourselves</Title>\n//       <ProgressBar duration={duration} displayTime={displayTime} />\n//       <FlexColDiv>\n//         <Player url={url} setStart={handleToggle} />\n//         <TimerBtn onClick={handleClick} />\n//       </FlexColDiv>\n//       {props.children}\n//     </Container>\n//   );\n// }\n\n\nexport default Theme;","map":{"version":3,"sources":["/Users/suyeonkang/Desktop/web development/Project/metta/src/components/theme/theme.js"],"names":["React","useState","useEffect","Container","Title","FlexColDiv","ProgressBar","TimerBtn","PlayBtn","Theme","props","url","audio","Audio","playing","setPlaying","duration","setDuration","currentTime","elapsed","play","pause","addEventListener","removeEventListener","token","setTimeout","updateTime","console","log","cleanUp","clearTimeout","handleClick","time","handleToggle","ontimeupdate","children"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport { Container } from './themeStyles';\nimport { Title, FlexColDiv } from '../../style/style';\nimport ProgressBar from '../progressBar/progressBar';\nimport TimerBtn from '../button/TimerBtn';\nimport PlayBtn from '../button/playBtn';\n\n// Container\nfunction Theme(props) {\n  const { url } = props;\n\n  const [audio] = useState(new Audio(url));\n  const [playing, setPlaying] = useState(false);\n  const [duration, setDuration] = useState(60);\n\n  const currentTime = audio.currentTime;\n  let elapsed = duration - currentTime;\n\n  // Play audio\n  useEffect(() => {\n    playing ? audio.play() : audio.pause();\n  }, [playing, audio]);\n\n  useEffect(() => {\n    audio.addEventListener('ended', () => setPlaying(false));\n    return () => {\n      audio.removeEventListener('ended', () => setPlaying(false));\n    };\n  }, [audio]);\n\n  // Update duration\n  useEffect(() => {\n    if (currentTime > duration) return;\n\n    if (playing) {\n      const token = setTimeout(updateTime, 1000);\n      console.log('[useEffect]');\n\n      return function cleanUp() {\n        clearTimeout(token);\n      };\n    }\n  });\n\n  console.log('duration: ' + duration);\n\n  const updateTime = () => {\n    if (playing) setDuration(duration - 1);\n    console.log('[updateTime]');\n  };\n  const handleClick = time => setDuration(time);\n  const handleToggle = () => setPlaying(!playing);\n\n  audio.ontimeupdate = () => {\n    if (currentTime >= duration) {\n      audio.pause();\n      audio.currentTime = 0;\n      setPlaying(false);\n    }\n  };\n\n  return (\n    <Container>\n      <Title size=\"md\">No one save us but ourselves</Title>\n      <ProgressBar\n        playing={playing}\n        duration={duration}\n        currentTime={currentTime}\n        elapsed={elapsed}\n      />\n      <FlexColDiv>\n        <PlayBtn playing={playing} onClick={handleToggle} />\n        <TimerBtn onClick={handleClick} />\n      </FlexColDiv>\n      {props.children}\n    </Container>\n  );\n}\n\n// SEcond\n// const Player = ({ setStart, playing, toggle }) => {\n//   const handleClick = () => {\n//     toggle();\n//     setStart();\n//   };\n\n//   return <PlayBtn onClick={handleClick} playing={playing} />;\n// };\n\n// function Theme(props) {\n//   const { url } = props;\n\n//   // Audio\n//   const [audio] = useState(new Audio(url));\n//   const [playing, setPlaying] = useState(false);\n\n//   const [start, setStart] = useState(false);\n//   const [duration, setDuration] = useState({ min: 60, sec: 0 });\n//   const { min, sec } = duration;\n\n//   const currentTime = audio.currentTime;\n//   let elapsed = min - currentTime;\n\n//   useEffect(() => {\n//     playing ? audio.play() : audio.pause();\n//   }, [playing, audio]);\n\n//   useEffect(() => {\n//     audio.addEventListener('ended', () => setPlaying(false));\n//     return () => {\n//       audio.removeEventListener('ended', () => setPlaying(false));\n//     };\n//   }, [audio]);\n\n//   const toggle = () => setPlaying(!playing);\n\n//   audio.ontimeupdate = () => {\n//     if (currentTime >= min) {\n//       audio.pause();\n//       audio.currentTime = 0;\n//       setPlaying(false);\n//     }\n//   };\n\n//   /////\n\n//   const displayTime = `${Math.floor(min / 60)}:${Math.floor(sec % 60)}`;\n\n//   const handleClick = time => {\n//     setDuration({ min: time, sec: 0 });\n//   };\n\n//   const handleToggle = () => {\n//     setStart(!start);\n//   };\n\n//   const updateTime = () => {\n//     if (start) {\n//       if (sec === 0) {\n//         setDuration({\n//           min: min - 1,\n//           sec: 59,\n//         });\n//       } else {\n//         setDuration({ ...duration, sec: sec - 1 });\n//       }\n//     }\n//   };\n\n//   useEffect(() => {\n//     if (start) {\n//       const token = setTimeout(updateTime, 1000);\n\n//       return function cleanUp() {\n//         clearTimeout(token);\n//       };\n//     }\n//   });\n\n//   return (\n//     <Container>\n//       <Title size=\"md\">No one save us but ourselves</Title>\n//       <ProgressBar\n//         duration={min}\n//         displayTime={displayTime}\n//         currentTime={currentTime}\n//         start={start}\n//       />\n//       <FlexColDiv>\n//         <Player\n//           url={url}\n//           setStart={handleToggle}\n//           toggle={toggle}\n//           playing={playing}\n//         />\n//         <TimerBtn onClick={handleClick} />\n//       </FlexColDiv>\n//       {props.children}\n//     </Container>\n//   );\n// }\n\n// Original\n// function Theme(props) {\n//   const { url } = props;\n\n//   const [start, setStart] = useState(false);\n//   const [duration, setDuration] = useState({ min: 600, sec: 0 });\n//   const { min, sec } = duration;\n\n//   const displayTime = `${Math.floor(min / 60)}:${Math.floor(sec % 60)}`;\n\n//   const handleClick = time => {\n//     setDuration({ min: time, sec: 0 });\n//   };\n\n//   const handleToggle = () => {\n//     setStart(!start);\n//   };\n\n//   const updateTime = () => {\n//     if (start) {\n//       if (sec === 0) {\n//         setDuration({\n//           min: min - 1,\n//           sec: 59,\n//         });\n//       } else {\n//         setDuration({ ...duration, sec: sec - 1 });\n//       }\n//     }\n//   };\n\n//   useEffect(() => {\n//     if (start) {\n//       const token = setTimeout(updateTime, 1000);\n\n//       return function cleanUp() {\n//         clearTimeout(token);\n//       };\n//     }\n//   });\n\n//   return (\n//     <Container>\n//       <Title size=\"md\">No one save us but ourselves</Title>\n//       <ProgressBar duration={duration} displayTime={displayTime} />\n//       <FlexColDiv>\n//         <Player url={url} setStart={handleToggle} />\n//         <TimerBtn onClick={handleClick} />\n//       </FlexColDiv>\n//       {props.children}\n//     </Container>\n//   );\n// }\n\nexport default Theme;\n"]},"metadata":{},"sourceType":"module"}