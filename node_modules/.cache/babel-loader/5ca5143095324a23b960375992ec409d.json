{"ast":null,"code":"var _jsxFileName = \"/Users/suyeonkang/Desktop/web development/Project/metta/src/containers/Theme/Theme.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Redirect, useLocation } from 'react-router-dom';\nimport { Container } from './ThemeStyles';\nimport ProgressBar from '../../components/ProgressBar/ProgressBar';\nimport TimerBtn from '../../components/Button/TimerBtn';\nimport PlayBtn from '../../components/Button/PlayBtn';\nimport DynamicText from '../../components/DynamicText/DynamicText';\n\nfunction Theme(props) {\n  const {\n    url\n  } = props; //const [audio] = useState(new Audio(url));\n\n  const [playing, setPlaying] = useState(false);\n  const [duration, setDuration] = useState(10);\n  const [currentTime, setCurrentTime] = useState(0);\n  const audio = new Audio(url);\n  const location = useLocation();\n  useEffect(() => {\n    const playback = new Sound(audioSource, '', error => {\n      if (error) {\n        console.tron.log('failed to load the sound', error);\n      }\n\n      setDuration(playback.getDuration());\n      console.tron.log('loaded successfully');\n    });\n    setFile(playback);\n    return () => {\n      // --> componentWillUnmount\n      playback.stop();\n      playback.release();\n    };\n  }, []); // Play audio\n\n  useEffect(() => {\n    // setPlaying(false)\n    playing ? audio.play() : audio.pause();\n  }, [playing, audio, location]);\n  useEffect(() => {\n    audio.addEventListener('ended', () => setPlaying(false));\n    return () => {\n      audio.removeEventListener('ended', () => setPlaying(false));\n    };\n  }, [audio]); //Update duration\n\n  useEffect(() => {\n    if (currentTime >= duration) return;\n\n    if (playing) {\n      const token = setTimeout(updateTime, 1000);\n      return function cleanUp() {\n        clearTimeout(token);\n      };\n    }\n  });\n\n  const handleClick = time => setDuration(time);\n\n  const handleToggle = () => setPlaying(!playing);\n\n  const updateTime = () => {\n    if (playing) setDuration(duration - 1);\n  }; // HERE Warging!\n\n\n  audio.ontimeupdate = () => {\n    setCurrentTime(audio.currentTime);\n\n    if (currentTime > duration) {\n      audio.pause();\n      audio.currentTime = 0;\n      setPlaying(false);\n    }\n  };\n\n  if (currentTime >= duration) {\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/congraturation\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DynamicText, {\n    playing: playing,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ProgressBar, {\n    playing: playing,\n    duration: duration,\n    currentTime: Math.floor(currentTime),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(PlayBtn, {\n    playing: playing,\n    onClick: handleToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TimerBtn, {\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }), props.children);\n}\n\nexport default React.memo(Theme);","map":{"version":3,"sources":["/Users/suyeonkang/Desktop/web development/Project/metta/src/containers/Theme/Theme.js"],"names":["React","useState","useEffect","Redirect","useLocation","Container","ProgressBar","TimerBtn","PlayBtn","DynamicText","Theme","props","url","playing","setPlaying","duration","setDuration","currentTime","setCurrentTime","audio","Audio","location","playback","Sound","audioSource","error","console","tron","log","getDuration","setFile","stop","release","play","pause","addEventListener","removeEventListener","token","setTimeout","updateTime","cleanUp","clearTimeout","handleClick","time","handleToggle","ontimeupdate","Math","floor","children","memo"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Redirect, useLocation } from 'react-router-dom';\n\nimport { Container } from './ThemeStyles';\nimport ProgressBar from '../../components/ProgressBar/ProgressBar';\nimport TimerBtn from '../../components/Button/TimerBtn';\nimport PlayBtn from '../../components/Button/PlayBtn';\n\nimport DynamicText from '../../components/DynamicText/DynamicText';\n\nfunction Theme(props) {\n  const { url } = props;\n  //const [audio] = useState(new Audio(url));\n  const [playing, setPlaying] = useState(false);\n  const [duration, setDuration] = useState(10);\n  const [currentTime, setCurrentTime] = useState(0);\n\n  const audio = new Audio(url);\n  const location = useLocation();\n  useEffect(() => {\n    const playback = new Sound(audioSource, '', error => {\n      if (error) {\n        console.tron.log('failed to load the sound', error);\n      }\n\n      setDuration(playback.getDuration());\n      console.tron.log('loaded successfully');\n    });\n\n    setFile(playback);\n    return () => {\n      // --> componentWillUnmount\n      playback.stop();\n      playback.release();\n    };\n  }, []);\n\n  // Play audio\n  useEffect(() => {\n    // setPlaying(false)\n    playing ? audio.play() : audio.pause();\n  }, [playing, audio, location]);\n\n  useEffect(() => {\n    audio.addEventListener('ended', () => setPlaying(false));\n    return () => {\n      audio.removeEventListener('ended', () => setPlaying(false));\n    };\n  }, [audio]);\n\n  //Update duration\n  useEffect(() => {\n    if (currentTime >= duration) return;\n    if (playing) {\n      const token = setTimeout(updateTime, 1000);\n\n      return function cleanUp() {\n        clearTimeout(token);\n      };\n    }\n  });\n\n  const handleClick = time => setDuration(time);\n  const handleToggle = () => setPlaying(!playing);\n  const updateTime = () => {\n    if (playing) setDuration(duration - 1);\n  };\n\n  // HERE Warging!\n  audio.ontimeupdate = () => {\n    setCurrentTime(audio.currentTime);\n    if (currentTime > duration) {\n      audio.pause();\n      audio.currentTime = 0;\n      setPlaying(false);\n    }\n  };\n\n  if (currentTime >= duration) {\n    return <Redirect to=\"/congraturation\" />;\n  }\n\n  return (\n    <Container>\n      <DynamicText playing={playing} />\n      <ProgressBar\n        playing={playing}\n        duration={duration}\n        currentTime={Math.floor(currentTime)}\n      />\n      <PlayBtn playing={playing} onClick={handleToggle} />\n      <TimerBtn onClick={handleClick} />\n      {props.children}\n    </Container>\n  );\n}\n\nexport default React.memo(Theme);\n"]},"metadata":{},"sourceType":"module"}