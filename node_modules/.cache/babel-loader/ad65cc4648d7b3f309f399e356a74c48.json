{"ast":null,"code":"var _jsxFileName = \"/Users/suyeonkang/Desktop/web development/Project/metta/src/components/ProgressBar/ProgressBar.js\";\nimport React, { useRef, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { PlayerContainer, FigureIcon, SVGIcon, Timer } from '../../containers/Theme/ThemeStyles';\nimport MeditatorIcon from \"../../assets/figure-2.svg\";\n\nfunction ProgressBar({\n  duration,\n  currentTime,\n  playing,\n  theme\n}) {\n  const [length, setLength] = useState();\n  const circleRef = useRef();\n  const progress = length - currentTime / duration * length;\n  const elapsed = duration - currentTime;\n  const sec = Math.floor(elapsed % 60);\n  const min = Math.floor(elapsed / 60);\n  useEffect(() => {\n    const circleLength = circleRef.current.getTotalLength();\n    setLength(circleLength);\n  }, []);\n  const svgConfig = {\n    width: 453,\n    height: 453,\n    viewBox: '0 0 453 453',\n    fill: 'none',\n    xmlns: 'http://www.w3.org/2000/svg'\n  };\n  const circleConfig = {\n    cx: 226.5,\n    cy: 226.5,\n    r: 216.5,\n    strokeWidth: 20\n  };\n  const color = {\n    ocean: {\n      progress: '#F7D06F',\n      stroke: '#F9B91B'\n    },\n    mountain: {\n      progress: '#7A9583',\n      stroke: '#649A77'\n    },\n    rain: {\n      progress: '#A0BDE6',\n      stroke: '#3680EA'\n    }\n  };\n  let progressColor;\n  let strokeColor;\n\n  switch (theme) {\n    case 'ocean':\n      progressColor = color.ocean.progress;\n      strokeColor = color.ocean.stroke;\n      break;\n\n    case 'mountain':\n      progressColor = color.mountain.progress;\n      strokeColor = color.mountain.stroke;\n      break;\n\n    case 'rain':\n      progressColor = color.rain.progress;\n      strokeColor = color.rain.stroke;\n      break;\n\n    default:\n      break;\n  }\n\n  return /*#__PURE__*/React.createElement(PlayerContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FigureIcon, {\n    src: MeditatorIcon,\n    alt: \"meditator\",\n    playing: playing,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(SVGIcon, Object.assign({}, svgConfig, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"circle\", Object.assign({}, circleConfig, {\n    stroke: progressColor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }))), /*#__PURE__*/React.createElement(SVGIcon, Object.assign({}, svgConfig, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"circle\", Object.assign({}, circleConfig, {\n    ref: circleRef // stroke=\"#3680EA\"\n    ,\n    stroke: strokeColor,\n    transform: \"rotate(-90 226.5 226.5)\",\n    style: {\n      strokeDasharray: length,\n      strokeDashoffset: progress ? progress : length\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }))), /*#__PURE__*/React.createElement(Timer, {\n    size: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, `${min}: ${sec}`));\n}\n\nProgressBar.propTypes = {\n  duration: PropTypes.number,\n  currentTime: PropTypes.number,\n  playing: PropTypes.bool\n};\nexport default React.memo(ProgressBar);","map":{"version":3,"sources":["/Users/suyeonkang/Desktop/web development/Project/metta/src/components/ProgressBar/ProgressBar.js"],"names":["React","useRef","useEffect","useState","PropTypes","PlayerContainer","FigureIcon","SVGIcon","Timer","ProgressBar","duration","currentTime","playing","theme","length","setLength","circleRef","progress","elapsed","sec","Math","floor","min","circleLength","current","getTotalLength","svgConfig","width","height","viewBox","fill","xmlns","circleConfig","cx","cy","r","strokeWidth","color","ocean","stroke","mountain","rain","progressColor","strokeColor","MeditatorIcon","strokeDasharray","strokeDashoffset","propTypes","number","bool","memo"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  PlayerContainer,\n  FigureIcon,\n  SVGIcon,\n  Timer,\n} from '../../containers/Theme/ThemeStyles';\nimport MeditatorIcon from '../../assets/figure-2.svg';\n\nfunction ProgressBar({ duration, currentTime, playing, theme }) {\n  const [length, setLength] = useState();\n  const circleRef = useRef();\n\n  const progress = length - (currentTime / duration) * length;\n  const elapsed = duration - currentTime;\n  const sec = Math.floor(elapsed % 60);\n  const min = Math.floor(elapsed / 60);\n\n  useEffect(() => {\n    const circleLength = circleRef.current.getTotalLength();\n    setLength(circleLength);\n  }, []);\n\n  const svgConfig = {\n    width: 453,\n    height: 453,\n    viewBox: '0 0 453 453',\n    fill: 'none',\n    xmlns: 'http://www.w3.org/2000/svg',\n  };\n\n  const circleConfig = {\n    cx: 226.5,\n    cy: 226.5,\n    r: 216.5,\n    strokeWidth: 20,\n  };\n\n  const color = {\n    ocean: { progress: '#F7D06F', stroke: '#F9B91B' },\n    mountain: { progress: '#7A9583', stroke: '#649A77' },\n    rain: { progress: '#A0BDE6', stroke: '#3680EA' },\n  };\n\n  let progressColor;\n  let strokeColor;\n\n  switch (theme) {\n    case 'ocean':\n      progressColor = color.ocean.progress;\n      strokeColor = color.ocean.stroke;\n      break;\n    case 'mountain':\n      progressColor = color.mountain.progress;\n      strokeColor = color.mountain.stroke;\n      break;\n    case 'rain':\n      progressColor = color.rain.progress;\n      strokeColor = color.rain.stroke;\n      break;\n    default:\n      break;\n  }\n\n  return (\n    <PlayerContainer>\n      <FigureIcon src={MeditatorIcon} alt=\"meditator\" playing={playing} />\n\n      <SVGIcon {...svgConfig}>\n        {/* <circle {...circleConfig} stroke=\"#A0BDE6\" /> */}\n        <circle {...circleConfig} stroke={progressColor} />\n      </SVGIcon>\n      <SVGIcon {...svgConfig}>\n        <circle\n          {...circleConfig}\n          ref={circleRef}\n          // stroke=\"#3680EA\"\n          stroke={strokeColor}\n          transform=\"rotate(-90 226.5 226.5)\"\n          style={{\n            strokeDasharray: length,\n            strokeDashoffset: progress ? progress : length,\n          }}\n        />\n      </SVGIcon>\n\n      <Timer size=\"sm\">{`${min}: ${sec}`}</Timer>\n    </PlayerContainer>\n  );\n}\n\nProgressBar.propTypes = {\n  duration: PropTypes.number,\n  currentTime: PropTypes.number,\n  playing: PropTypes.bool,\n};\n\nexport default React.memo(ProgressBar);\n"]},"metadata":{},"sourceType":"module"}