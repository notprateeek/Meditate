{"ast":null,"code":"var _jsxFileName = \"/Users/suyeonkang/Desktop/web development/Project/metta/src/components/progressBar/progressBar.js\";\nimport React, { useRef, useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport MeditatorIcon from \"../../assets/figure-2.svg\";\nimport { PlayerContainer, FigureIcon, SVGIcon } from '../theme/themeStyles';\n\nfunction ProgressBar({\n  duration\n}) {\n  const circleConfig = {\n    viewBox: '0 0 38 38',\n    x: '19',\n    y: '19',\n    radio: '15.91549430918954'\n  };\n  return /*#__PURE__*/React.createElement(\"figure\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(SVGIcon, {\n    viewBox: circleConfig.viewBox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"circle\", {\n    className: \"ring\",\n    cx: circleConfig.x,\n    cy: circleConfig.y,\n    r: circleConfig.radio,\n    fill: \"transparent\",\n    stroke: \"gray\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"circle\", {\n    className: \"path\",\n    cx: circleConfig.x,\n    cy: circleConfig.y,\n    r: circleConfig.radio,\n    fill: \"transparent\",\n    stroke: \"teal\",\n    strokeDasharray: \"75 25\",\n    strokeDashoffset: \"25\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"g\", {\n    className: \"circle-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"text\", {\n    x: \"50%\",\n    y: \"50%\",\n    className: \"circle-percentage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }\n  }, \"75%\"), /*#__PURE__*/React.createElement(\"text\", {\n    x: \"50%\",\n    y: \"50%\",\n    className: \"circle-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  }, \"COMPLETE\"))));\n} // function ProgressBar({ duration }) {\n//   const circleRef = useRef();\n//   const [length, setLength] = useState();\n//   useEffect(() => {\n//     const circleLength = circleRef.current.getTotalLength();\n//     setLength(circleLength);\n//     console.log(circleLength);\n//   }, []);\n//   const svgConfig = {\n//     width: 453,\n//     height: 453,\n//     viewBox: '0 0 453 453',\n//     fill: 'none',\n//     xmlns: 'http://www.w3.org/2000/svg',\n//   };\n//   const circleConfig = {\n//     cx: 226.5,\n//     cy: 226.5,\n//     r: 216.5,\n//   };\n//   // Progress bar based on sound\n//   // DOMstring.sound.ontimeupdate = () => {\n//   //   let currentTime = DOMstring.sound.currentTime;\n//   //   let elapsed = duration - currentTime;\n//   //   let seconds = Math.floor(elapsed % 60);\n//   //   let minutes = Math.floor(elapsed / 60);\n//   //   let progress = length - (currentTime / duration) * length;\n//   //   DOMstring.outline.style.strokeDashoffset = progress;\n//   //   // Reset when time is over\n//   //   if (currentTime >= duration) {\n//   //     DOMstring.sound.pause();\n//   //     DOMstring.sound.currentTime = 0;\n//   //     DOMstring.playBtn.src = './img/svg/play.svg';\n//   //   }\n//   // };\n//   return (\n//     <PlayerContainer>\n//       <FigureIcon src={MeditatorIcon} alt=\"meditator\" />\n//       <SVGIcon\n//         // class=\"track-outline\"\n//         {...svgConfig}>\n//         <circle {...circleConfig} stroke=\"white\" strokeWidth=\"20\" />\n//       </SVGIcon>\n//       <SVGIcon\n//         // class=\"moving-outline\"\n//         {...svgConfig}>\n//         <circle\n//           {...circleConfig}\n//           stroke=\"#018EBA\"\n//           strokeWidth=\"20\"\n//           ref={circleRef}\n//           style={{ strokeDasharray: length, strokeDashoffset: length }}\n//         />\n//       </SVGIcon>\n//     </PlayerContainer>\n//   );\n// }\n\n\nexport default ProgressBar;","map":{"version":3,"sources":["/Users/suyeonkang/Desktop/web development/Project/metta/src/components/progressBar/progressBar.js"],"names":["React","useRef","useEffect","useState","styled","PlayerContainer","FigureIcon","SVGIcon","ProgressBar","duration","circleConfig","viewBox","x","y","radio"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,MAAP,MAAmB,mBAAnB;;AAGA,SAASC,eAAT,EAA0BC,UAA1B,EAAsCC,OAAtC,QAAqD,sBAArD;;AAEA,SAASC,WAAT,CAAqB;AAAEC,EAAAA;AAAF,CAArB,EAAmC;AACjC,QAAMC,YAAY,GAAG;AACnBC,IAAAA,OAAO,EAAE,WADU;AAEnBC,IAAAA,CAAC,EAAE,IAFgB;AAGnBC,IAAAA,CAAC,EAAE,IAHgB;AAInBC,IAAAA,KAAK,EAAE;AAJY,GAArB;AAOA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,OAAD;AAAS,IAAA,OAAO,EAAEJ,YAAY,CAACC,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAC,MADZ;AAEE,IAAA,EAAE,EAAED,YAAY,CAACE,CAFnB;AAGE,IAAA,EAAE,EAAEF,YAAY,CAACG,CAHnB;AAIE,IAAA,CAAC,EAAEH,YAAY,CAACI,KAJlB;AAKE,IAAA,IAAI,EAAC,aALP;AAME,IAAA,MAAM,EAAC,MANT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAUE;AACE,IAAA,SAAS,EAAC,MADZ;AAEE,IAAA,EAAE,EAAEJ,YAAY,CAACE,CAFnB;AAGE,IAAA,EAAE,EAAEF,YAAY,CAACG,CAHnB;AAIE,IAAA,CAAC,EAAEH,YAAY,CAACI,KAJlB;AAKE,IAAA,IAAI,EAAC,aALP;AAME,IAAA,MAAM,EAAC,MANT;AAOE,IAAA,eAAe,EAAC,OAPlB;AAQE,IAAA,gBAAgB,EAAC,IARnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,eAqBE;AAAG,IAAA,SAAS,EAAC,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAM,IAAA,CAAC,EAAC,KAAR;AAAc,IAAA,CAAC,EAAC,KAAhB;AAAsB,IAAA,SAAS,EAAC,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF,eAIE;AAAM,IAAA,CAAC,EAAC,KAAR;AAAc,IAAA,CAAC,EAAC,KAAhB;AAAsB,IAAA,SAAS,EAAC,aAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF,CArBF,CADF,CADF;AAkCD,C,CACD;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeN,WAAf","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\nimport MeditatorIcon from '../../assets/figure-2.svg';\nimport { PlayerContainer, FigureIcon, SVGIcon } from '../theme/themeStyles';\n\nfunction ProgressBar({ duration }) {\n  const circleConfig = {\n    viewBox: '0 0 38 38',\n    x: '19',\n    y: '19',\n    radio: '15.91549430918954',\n  };\n\n  return (\n    <figure>\n      <SVGIcon viewBox={circleConfig.viewBox}>\n        <circle\n          className=\"ring\"\n          cx={circleConfig.x}\n          cy={circleConfig.y}\n          r={circleConfig.radio}\n          fill=\"transparent\"\n          stroke=\"gray\"\n        />\n\n        <circle\n          className=\"path\"\n          cx={circleConfig.x}\n          cy={circleConfig.y}\n          r={circleConfig.radio}\n          fill=\"transparent\"\n          stroke=\"teal\"\n          strokeDasharray=\"75 25\"\n          strokeDashoffset=\"25\"\n        />\n\n        <g className=\"circle-label\">\n          <text x=\"50%\" y=\"50%\" className=\"circle-percentage\">\n            75%\n          </text>\n          <text x=\"50%\" y=\"50%\" className=\"circle-text\">\n            COMPLETE\n          </text>\n        </g>\n      </SVGIcon>\n    </figure>\n  );\n}\n// function ProgressBar({ duration }) {\n//   const circleRef = useRef();\n//   const [length, setLength] = useState();\n\n//   useEffect(() => {\n//     const circleLength = circleRef.current.getTotalLength();\n//     setLength(circleLength);\n//     console.log(circleLength);\n//   }, []);\n\n//   const svgConfig = {\n//     width: 453,\n//     height: 453,\n//     viewBox: '0 0 453 453',\n//     fill: 'none',\n//     xmlns: 'http://www.w3.org/2000/svg',\n//   };\n\n//   const circleConfig = {\n//     cx: 226.5,\n//     cy: 226.5,\n//     r: 216.5,\n//   };\n\n//   // Progress bar based on sound\n//   // DOMstring.sound.ontimeupdate = () => {\n//   //   let currentTime = DOMstring.sound.currentTime;\n//   //   let elapsed = duration - currentTime;\n//   //   let seconds = Math.floor(elapsed % 60);\n//   //   let minutes = Math.floor(elapsed / 60);\n//   //   let progress = length - (currentTime / duration) * length;\n\n//   //   DOMstring.outline.style.strokeDashoffset = progress;\n\n//   //   // Reset when time is over\n//   //   if (currentTime >= duration) {\n//   //     DOMstring.sound.pause();\n//   //     DOMstring.sound.currentTime = 0;\n//   //     DOMstring.playBtn.src = './img/svg/play.svg';\n//   //   }\n//   // };\n\n//   return (\n//     <PlayerContainer>\n//       <FigureIcon src={MeditatorIcon} alt=\"meditator\" />\n\n//       <SVGIcon\n//         // class=\"track-outline\"\n//         {...svgConfig}>\n//         <circle {...circleConfig} stroke=\"white\" strokeWidth=\"20\" />\n//       </SVGIcon>\n//       <SVGIcon\n//         // class=\"moving-outline\"\n//         {...svgConfig}>\n//         <circle\n//           {...circleConfig}\n//           stroke=\"#018EBA\"\n//           strokeWidth=\"20\"\n//           ref={circleRef}\n//           style={{ strokeDasharray: length, strokeDashoffset: length }}\n//         />\n//       </SVGIcon>\n//     </PlayerContainer>\n//   );\n// }\n\nexport default ProgressBar;\n"]},"metadata":{},"sourceType":"module"}