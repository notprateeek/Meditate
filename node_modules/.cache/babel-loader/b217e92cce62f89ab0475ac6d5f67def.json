{"ast":null,"code":"var _jsxFileName = \"/Users/suyeonkang/Desktop/web development/Project/metta/src/components/timeLoader/timeLoader.js\";\nimport React, { useRef, useEffect, useState } from 'react';\nimport MeditatorIcon from \"../../images/figure-2.svg\";\nimport { PlayerContainer, FigureIcon, SVGIcon } from '../theme/themeStyles';\n\nfunction TimeLoader({\n  duration\n}) {\n  const circleRef = useRef();\n  const [length, setLength] = useState();\n  useEffect(() => {\n    const circleLength = circleRef.current.getTotalLength();\n    setLength(circleLength);\n    console.log(circleLength);\n  }, []);\n  const svgConfig = {\n    width: 453,\n    height: 453,\n    viewBox: '0 0 453 453',\n    fill: 'none',\n    xmlns: 'http://www.w3.org/2000/svg'\n  };\n  const circleConfig = {\n    cx: 226.5,\n    cy: 226.5,\n    r: 216.5\n  }; // HERE\n\n  DOMstring.sound.ontimeupdate = () => {\n    let currentTime = DOMstring.sound.currentTime;\n    let elapsed = duration - currentTime;\n    let seconds = Math.floor(elapsed % 60);\n    let minutes = Math.floor(elapsed / 60);\n    let progress = length - currentTime / duration * length;\n    DOMstring.outline.style.strokeDashoffset = progress; // Animate text\n\n    DOMstring.displayTime.textContent = `${minutes}:${seconds}`; // Reset when time is over\n\n    if (currentTime >= duration) {\n      DOMstring.sound.pause();\n      DOMstring.sound.currentTime = 0;\n      DOMstring.playBtn.src = './img/svg/play.svg';\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(PlayerContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FigureIcon, {\n    src: MeditatorIcon,\n    alt: \"meditator\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(SVGIcon // class=\"track-outline\"\n  , Object.assign({}, svgConfig, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"circle\", Object.assign({}, circleConfig, {\n    stroke: \"white\",\n    strokeWidth: \"20\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }))), /*#__PURE__*/React.createElement(SVGIcon // class=\"moving-outline\"\n  , Object.assign({}, svgConfig, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"circle\", Object.assign({}, circleConfig, {\n    stroke: \"#018EBA\",\n    strokeWidth: \"20\",\n    ref: circleRef,\n    style: {\n      strokeDasharray: length,\n      strokeDashoffset: length\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }))));\n}\n\nexport default TimeLoader;","map":{"version":3,"sources":["/Users/suyeonkang/Desktop/web development/Project/metta/src/components/timeLoader/timeLoader.js"],"names":["React","useRef","useEffect","useState","PlayerContainer","FigureIcon","SVGIcon","TimeLoader","duration","circleRef","length","setLength","circleLength","current","getTotalLength","console","log","svgConfig","width","height","viewBox","fill","xmlns","circleConfig","cx","cy","r","DOMstring","sound","ontimeupdate","currentTime","elapsed","seconds","Math","floor","minutes","progress","outline","style","strokeDashoffset","displayTime","textContent","pause","playBtn","src","MeditatorIcon","strokeDasharray"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;;AAGA,SAASC,eAAT,EAA0BC,UAA1B,EAAsCC,OAAtC,QAAqD,sBAArD;;AAEA,SAASC,UAAT,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAAkC;AAChC,QAAMC,SAAS,GAAGR,MAAM,EAAxB;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBR,QAAQ,EAApC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,YAAY,GAAGH,SAAS,CAACI,OAAV,CAAkBC,cAAlB,EAArB;AACAH,IAAAA,SAAS,CAACC,YAAD,CAAT;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYJ,YAAZ;AACD,GAJQ,EAIN,EAJM,CAAT;AAMA,QAAMK,SAAS,GAAG;AAChBC,IAAAA,KAAK,EAAE,GADS;AAEhBC,IAAAA,MAAM,EAAE,GAFQ;AAGhBC,IAAAA,OAAO,EAAE,aAHO;AAIhBC,IAAAA,IAAI,EAAE,MAJU;AAKhBC,IAAAA,KAAK,EAAE;AALS,GAAlB;AAQA,QAAMC,YAAY,GAAG;AACnBC,IAAAA,EAAE,EAAE,KADe;AAEnBC,IAAAA,EAAE,EAAE,KAFe;AAGnBC,IAAAA,CAAC,EAAE;AAHgB,GAArB,CAlBgC,CAwBhC;;AACAC,EAAAA,SAAS,CAACC,KAAV,CAAgBC,YAAhB,GAA+B,MAAM;AACnC,QAAIC,WAAW,GAAGH,SAAS,CAACC,KAAV,CAAgBE,WAAlC;AACA,QAAIC,OAAO,GAAGvB,QAAQ,GAAGsB,WAAzB;AACA,QAAIE,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWH,OAAO,GAAG,EAArB,CAAd;AACA,QAAII,OAAO,GAAGF,IAAI,CAACC,KAAL,CAAWH,OAAO,GAAG,EAArB,CAAd;AACA,QAAIK,QAAQ,GAAG1B,MAAM,GAAIoB,WAAW,GAAGtB,QAAf,GAA2BE,MAAnD;AACAiB,IAAAA,SAAS,CAACU,OAAV,CAAkBC,KAAlB,CAAwBC,gBAAxB,GAA2CH,QAA3C,CANmC,CAQnC;;AACAT,IAAAA,SAAS,CAACa,WAAV,CAAsBC,WAAtB,GAAqC,GAAEN,OAAQ,IAAGH,OAAQ,EAA1D,CATmC,CAWnC;;AACA,QAAIF,WAAW,IAAItB,QAAnB,EAA6B;AAC3BmB,MAAAA,SAAS,CAACC,KAAV,CAAgBc,KAAhB;AACAf,MAAAA,SAAS,CAACC,KAAV,CAAgBE,WAAhB,GAA8B,CAA9B;AACAH,MAAAA,SAAS,CAACgB,OAAV,CAAkBC,GAAlB,GAAwB,oBAAxB;AACD;AACF,GAjBD;;AAmBA,sBACE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,GAAG,EAAEC,aAAjB;AAAgC,IAAA,GAAG,EAAC,WAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAGE,oBAAC,OAAD,CACE;AADF,sBAEM5B,SAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAGE,gDAAYM,YAAZ;AAA0B,IAAA,MAAM,EAAC,OAAjC;AAAyC,IAAA,WAAW,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAHF,CAHF,eAQE,oBAAC,OAAD,CACE;AADF,sBAEMN,SAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAGE,gDACMM,YADN;AAEE,IAAA,MAAM,EAAC,SAFT;AAGE,IAAA,WAAW,EAAC,IAHd;AAIE,IAAA,GAAG,EAAEd,SAJP;AAKE,IAAA,KAAK,EAAE;AAAEqC,MAAAA,eAAe,EAAEpC,MAAnB;AAA2B6B,MAAAA,gBAAgB,EAAE7B;AAA7C,KALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAHF,CARF,CADF;AAsBD;;AAED,eAAeH,UAAf","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\n\nimport MeditatorIcon from '../../images/figure-2.svg';\nimport { PlayerContainer, FigureIcon, SVGIcon } from '../theme/themeStyles';\n\nfunction TimeLoader({ duration }) {\n  const circleRef = useRef();\n  const [length, setLength] = useState();\n\n  useEffect(() => {\n    const circleLength = circleRef.current.getTotalLength();\n    setLength(circleLength);\n    console.log(circleLength);\n  }, []);\n\n  const svgConfig = {\n    width: 453,\n    height: 453,\n    viewBox: '0 0 453 453',\n    fill: 'none',\n    xmlns: 'http://www.w3.org/2000/svg',\n  };\n\n  const circleConfig = {\n    cx: 226.5,\n    cy: 226.5,\n    r: 216.5,\n  };\n\n  // HERE\n  DOMstring.sound.ontimeupdate = () => {\n    let currentTime = DOMstring.sound.currentTime;\n    let elapsed = duration - currentTime;\n    let seconds = Math.floor(elapsed % 60);\n    let minutes = Math.floor(elapsed / 60);\n    let progress = length - (currentTime / duration) * length;\n    DOMstring.outline.style.strokeDashoffset = progress;\n\n    // Animate text\n    DOMstring.displayTime.textContent = `${minutes}:${seconds}`;\n\n    // Reset when time is over\n    if (currentTime >= duration) {\n      DOMstring.sound.pause();\n      DOMstring.sound.currentTime = 0;\n      DOMstring.playBtn.src = './img/svg/play.svg';\n    }\n  };\n\n  return (\n    <PlayerContainer>\n      <FigureIcon src={MeditatorIcon} alt=\"meditator\" />\n\n      <SVGIcon\n        // class=\"track-outline\"\n        {...svgConfig}>\n        <circle {...circleConfig} stroke=\"white\" strokeWidth=\"20\" />\n      </SVGIcon>\n      <SVGIcon\n        // class=\"moving-outline\"\n        {...svgConfig}>\n        <circle\n          {...circleConfig}\n          stroke=\"#018EBA\"\n          strokeWidth=\"20\"\n          ref={circleRef}\n          style={{ strokeDasharray: length, strokeDashoffset: length }}\n        />\n      </SVGIcon>\n    </PlayerContainer>\n  );\n}\n\nexport default TimeLoader;\n"]},"metadata":{},"sourceType":"module"}