{"ast":null,"code":"var _jsxFileName = \"/Users/suyeonkang/Desktop/web development/Project/metta/src/components/progressBar/progressBar.js\";\nimport React, { useRef, useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport MeditatorIcon from \"../../assets/figure-2.svg\";\nimport { PlayerContainer, FigureIcon, SVGIcon } from '../theme/themeStyles';\nconst INITIAL_OFFSET = 25;\nconst circleConfig = {\n  viewBox: '0 0 38 38',\n  x: '19',\n  y: '19',\n  radio: '15.91549430918954'\n};\n\nfunction ProgressBar({\n  className,\n  trailStrokeColor,\n  strokeColor,\n  percentage,\n  innerText,\n  start\n}) {\n  const [progressBar, setProgressBar] = useState(0);\n\n  const updatePercentage = () => {\n    setTimeout(() => {\n      setProgressBar(progressBar + 1);\n    }, 5);\n  };\n\n  useEffect(() => {\n    if (percentage > 0 && start) updatePercentage();\n  }, [percentage]);\n  useEffect(() => {\n    if (progressBar < percentage && start) updatePercentage();\n  }, [progressBar]);\n  const svgConfig = {\n    width: 453,\n    height: 453,\n    viewBox: '0 0 453 453',\n    fill: 'none',\n    xmlns: 'http://www.w3.org/2000/svg'\n  };\n  const circleConfig = {\n    cx: 226.5,\n    cy: 226.5,\n    r: 216.5\n  };\n  return /*#__PURE__*/React.createElement(PlayerContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FigureIcon, {\n    src: MeditatorIcon,\n    alt: \"meditator\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"figure\", {\n    className: className,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(SVGIcon, {\n    viewBox: circleConfig.viewBox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"circle\", {\n    className: \"ring\",\n    cx: circleConfig.x,\n    cy: circleConfig.y,\n    r: circleConfig.radio,\n    fill: \"transparent\",\n    stroke: trailStrokeColor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"circle\", {\n    className: \"path\",\n    cx: circleConfig.x,\n    cy: circleConfig.y,\n    r: circleConfig.radio,\n    fill: \"transparent\",\n    stroke: strokeColor,\n    strokeDasharray: `${100 - percentage} ${percentage}`,\n    strokeDashoffset: INITIAL_OFFSET,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"g\", {\n    className: \"circle-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"text\", {\n    x: \"50%\",\n    y: \"50%\",\n    className: \"circle-percentage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, percentage, \"%\")))));\n}\n\nexport default ProgressBar; // function ProgressBar({ duration }) {\n//   const circleRef = useRef();\n//   const [length, setLength] = useState();\n//   useEffect(() => {\n//     const circleLength = circleRef.current.getTotalLength();\n//     setLength(circleLength);\n//     console.log(circleLength);\n//   }, []);\n//   const svgConfig = {\n//     width: 453,\n//     height: 453,\n//     viewBox: '0 0 453 453',\n//     fill: 'none',\n//     xmlns: 'http://www.w3.org/2000/svg',\n//   };\n//   const circleConfig = {\n//     cx: 226.5,\n//     cy: 226.5,\n//     r: 216.5,\n//   };\n//   // Progress bar based on sound\n//   // DOMstring.sound.ontimeupdate = () => {\n//   //   let currentTime = DOMstring.sound.currentTime;\n//   //   let elapsed = duration - currentTime;\n//   //   let seconds = Math.floor(elapsed % 60);\n//   //   let minutes = Math.floor(elapsed / 60);\n//   //   let progress = length - (currentTime / duration) * length;\n//   //   DOMstring.outline.style.strokeDashoffset = progress;\n//   //   // Reset when time is over\n//   //   if (currentTime >= duration) {\n//   //     DOMstring.sound.pause();\n//   //     DOMstring.sound.currentTime = 0;\n//   //     DOMstring.playBtn.src = './img/svg/play.svg';\n//   //   }\n//   // };\n//   return (\n//     <PlayerContainer>\n//       <FigureIcon src={MeditatorIcon} alt=\"meditator\" />\n//       <SVGIcon\n//         // class=\"track-outline\"\n//         {...svgConfig}>\n//         <circle {...circleConfig} stroke=\"white\" strokeWidth=\"20\" />\n//       </SVGIcon>\n//       <SVGIcon\n//         // class=\"moving-outline\"\n//         {...svgConfig}>\n//         <circle\n//           {...circleConfig}\n//           stroke=\"#018EBA\"\n//           strokeWidth=\"20\"\n//           ref={circleRef}\n//           style={{ strokeDasharray: length, strokeDashoffset: length }}\n//         />\n//       </SVGIcon>\n//     </PlayerContainer>\n//   );\n// }\n// export default ProgressBar;","map":{"version":3,"sources":["/Users/suyeonkang/Desktop/web development/Project/metta/src/components/progressBar/progressBar.js"],"names":["React","useRef","useEffect","useState","styled","PlayerContainer","FigureIcon","SVGIcon","INITIAL_OFFSET","circleConfig","viewBox","x","y","radio","ProgressBar","className","trailStrokeColor","strokeColor","percentage","innerText","start","progressBar","setProgressBar","updatePercentage","setTimeout","svgConfig","width","height","fill","xmlns","cx","cy","r","MeditatorIcon"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\nimport MeditatorIcon from '../../assets/figure-2.svg';\nimport { PlayerContainer, FigureIcon, SVGIcon } from '../theme/themeStyles';\n\nconst INITIAL_OFFSET = 25;\nconst circleConfig = {\n  viewBox: '0 0 38 38',\n  x: '19',\n  y: '19',\n  radio: '15.91549430918954',\n};\n\nfunction ProgressBar({\n  className,\n  trailStrokeColor,\n  strokeColor,\n  percentage,\n  innerText,\n  start,\n}) {\n  const [progressBar, setProgressBar] = useState(0);\n\n  const updatePercentage = () => {\n    setTimeout(() => {\n      setProgressBar(progressBar + 1);\n    }, 5);\n  };\n\n  useEffect(() => {\n    if (percentage > 0 && start) updatePercentage();\n  }, [percentage]);\n\n  useEffect(() => {\n    if (progressBar < percentage && start) updatePercentage();\n  }, [progressBar]);\n\n  const svgConfig = {\n    width: 453,\n    height: 453,\n    viewBox: '0 0 453 453',\n    fill: 'none',\n    xmlns: 'http://www.w3.org/2000/svg',\n  };\n\n  const circleConfig = {\n    cx: 226.5,\n    cy: 226.5,\n    r: 216.5,\n  };\n\n  return (\n    <PlayerContainer>\n      <FigureIcon src={MeditatorIcon} alt=\"meditator\" />\n\n      <figure className={className}>\n        <SVGIcon viewBox={circleConfig.viewBox}>\n          <circle\n            className=\"ring\"\n            cx={circleConfig.x}\n            cy={circleConfig.y}\n            r={circleConfig.radio}\n            fill=\"transparent\"\n            stroke={trailStrokeColor}\n          />\n\n          <circle\n            className=\"path\"\n            cx={circleConfig.x}\n            cy={circleConfig.y}\n            r={circleConfig.radio}\n            fill=\"transparent\"\n            stroke={strokeColor}\n            strokeDasharray={`${100 - percentage} ${percentage}`}\n            strokeDashoffset={INITIAL_OFFSET}\n          />\n          <g className=\"circle-label\">\n            <text x=\"50%\" y=\"50%\" className=\"circle-percentage\">\n              {percentage}%\n            </text>\n            {/* <text x=\"50%\" y=\"50%\" className=\"circle-text\">\n            {innerText}\n          </text> */}\n          </g>\n        </SVGIcon>\n      </figure>\n    </PlayerContainer>\n  );\n}\n\nexport default ProgressBar;\n\n// function ProgressBar({ duration }) {\n//   const circleRef = useRef();\n//   const [length, setLength] = useState();\n\n//   useEffect(() => {\n//     const circleLength = circleRef.current.getTotalLength();\n//     setLength(circleLength);\n//     console.log(circleLength);\n//   }, []);\n\n//   const svgConfig = {\n//     width: 453,\n//     height: 453,\n//     viewBox: '0 0 453 453',\n//     fill: 'none',\n//     xmlns: 'http://www.w3.org/2000/svg',\n//   };\n\n//   const circleConfig = {\n//     cx: 226.5,\n//     cy: 226.5,\n//     r: 216.5,\n//   };\n\n//   // Progress bar based on sound\n//   // DOMstring.sound.ontimeupdate = () => {\n//   //   let currentTime = DOMstring.sound.currentTime;\n//   //   let elapsed = duration - currentTime;\n//   //   let seconds = Math.floor(elapsed % 60);\n//   //   let minutes = Math.floor(elapsed / 60);\n//   //   let progress = length - (currentTime / duration) * length;\n\n//   //   DOMstring.outline.style.strokeDashoffset = progress;\n\n//   //   // Reset when time is over\n//   //   if (currentTime >= duration) {\n//   //     DOMstring.sound.pause();\n//   //     DOMstring.sound.currentTime = 0;\n//   //     DOMstring.playBtn.src = './img/svg/play.svg';\n//   //   }\n//   // };\n\n//   return (\n//     <PlayerContainer>\n//       <FigureIcon src={MeditatorIcon} alt=\"meditator\" />\n\n//       <SVGIcon\n//         // class=\"track-outline\"\n//         {...svgConfig}>\n//         <circle {...circleConfig} stroke=\"white\" strokeWidth=\"20\" />\n//       </SVGIcon>\n//       <SVGIcon\n//         // class=\"moving-outline\"\n//         {...svgConfig}>\n//         <circle\n//           {...circleConfig}\n//           stroke=\"#018EBA\"\n//           strokeWidth=\"20\"\n//           ref={circleRef}\n//           style={{ strokeDasharray: length, strokeDashoffset: length }}\n//         />\n//       </SVGIcon>\n//     </PlayerContainer>\n//   );\n// }\n\n// export default ProgressBar;\n"]},"metadata":{},"sourceType":"module"}