{"ast":null,"code":"var _jsxFileName = \"/Volumes/TOSHIBA EXT/dev/metta/src/components/Button/TimerBtn.js\";\nimport React, { useState, useRef } from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport useClickOutside from '../../hooks/useClickOutside';\nconst BtnContainer = styled.div`\n  position: absolute;\n  top: 5rem;\n  right: 0;\n  border-radius: 7px 0 0 7px;\n  color: white;\n  background: black;\n  width: ${props => props.isOpen ? '10rem' : '3rem'};\n  height: 8rem;\n  display: flex;\n  justify-content: ${props => props.isOpen ? 'flex-start' : 'center'};\n  align-items: center;\n  cursor: pointer;\n  z-index: 3;\n\n  @media (max-width: 320px) {\n    top: 0;\n  }\n`;\nconst Span = styled.span`\n  display: inline-block;\n  transform: rotate(270deg);\n  letter-spacing: 4px;\n  font-size: 1.2rem;\n`;\nconst SubBtn = styled.button`\n  display: block;\n  background: transparent;\n  color: white;\n  font-size: 1rem;\n  font-weight: 700;\n  text-align: left;\n  cursor: pointer;\n  margin: 5px;\n`;\nconst Options = styled.select`\n  position: absolute;\n  top: 5rem;\n  right: 0;\n`;\n\nfunction TimerBtn({\n  onClick\n}) {\n  const [isOpen, setIsOpen] = useState(false);\n  const ref = useRef();\n  const times = [{\n    duration: 240,\n    text: '4 min'\n  }, {\n    duration: 360,\n    text: '6 min'\n  }, {\n    duration: 480,\n    text: '8 min'\n  }];\n\n  const handleClick = e => {\n    if (e.target.id !== 'timeBtn') setIsOpen(!isOpen);\n  };\n\n  useClickOutside(ref, () => {\n    setIsOpen(false);\n  });\n  const buttons = times.map((t, i) => /*#__PURE__*/React.createElement(SubBtn, {\n    id: \"timeBtn\",\n    onClick: () => onClick(t.duration),\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, t.text));\n  return /*#__PURE__*/React.createElement(Options, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, times.map(t => /*#__PURE__*/React.createElement(\"option\", {\n    value: t.duration,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, t.text)));\n}\n\nTimerBtn.propTypes = {\n  onClick: PropTypes.func\n}; // import React, { useState, useRef } from 'react';\n// import styled from 'styled-components';\n// import PropTypes from 'prop-types';\n// import useClickOutside from '../../hooks/useClickOutside';\n// const BtnContainer = styled.div`\n//   position: absolute;\n//   top: 5rem;\n//   right: 0;\n//   border-radius: 7px 0 0 7px;\n//   color: white;\n//   background: black;\n//   width: ${props => (props.isOpen ? '10rem' : '3rem')};\n//   height: 8rem;\n//   display: flex;\n//   justify-content: ${props => (props.isOpen ? 'flex-start' : 'center')};\n//   align-items: center;\n//   cursor: pointer;\n//   z-index: 3;\n//   @media (max-width: 320px) {\n//     top: 0;\n//   }\n// `;\n// const Span = styled.span`\n//   display: inline-block;\n//   transform: rotate(270deg);\n//   letter-spacing: 4px;\n//   font-size: 1.2rem;\n// `;\n// const SubBtn = styled.button`\n//   display: block;\n//   background: transparent;\n//   color: white;\n//   font-size: 1rem;\n//   font-weight: 700;\n//   text-align: left;\n//   cursor: pointer;\n//   margin: 5px;\n// `;\n// function TimerBtn({ onClick }) {\n//   const [isOpen, setIsOpen] = useState(false);\n//   const ref = useRef();\n//   const times = [\n//     { duration: 240, text: '4 min' },\n//     { duration: 360, text: '6 min' },\n//     { duration: 480, text: '8 min' },\n//   ];\n//   const handleClick = e => {\n//     if (e.target.id !== 'timeBtn') setIsOpen(!isOpen);\n//   };\n//   useClickOutside(ref, () => {\n//     setIsOpen(false);\n//   });\n//   const buttons = times.map((t, i) => (\n//     <SubBtn id=\"timeBtn\" onClick={() => onClick(t.duration)} key={i}>\n//       {t.text}\n//     </SubBtn>\n//   ));\n//   return (\n//     <BtnContainer onClick={handleClick} isOpen={isOpen} ref={ref}>\n//       <Span>TIMER</Span>\n//       {isOpen && <div>{buttons}</div>}\n//     </BtnContainer>\n//   );\n// }\n// TimerBtn.propTypes = {\n//   onClick: PropTypes.func,\n// };\n\nexport default TimerBtn;","map":{"version":3,"sources":["/Volumes/TOSHIBA EXT/dev/metta/src/components/Button/TimerBtn.js"],"names":["React","useState","useRef","styled","PropTypes","useClickOutside","BtnContainer","div","props","isOpen","Span","span","SubBtn","button","Options","select","TimerBtn","onClick","setIsOpen","ref","times","duration","text","handleClick","e","target","id","buttons","map","t","i","propTypes","func"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,eAAP,MAA4B,6BAA5B;AAEA,MAAMC,YAAY,GAAGH,MAAM,CAACI,GAAI;;;;;;;WAOrBC,KAAK,IAAKA,KAAK,CAACC,MAAN,GAAe,OAAf,GAAyB,MAAQ;;;qBAGjCD,KAAK,IAAKA,KAAK,CAACC,MAAN,GAAe,YAAf,GAA8B,QAAU;;;;;;;;CAVvE;AAoBA,MAAMC,IAAI,GAAGP,MAAM,CAACQ,IAAK;;;;;CAAzB;AAOA,MAAMC,MAAM,GAAGT,MAAM,CAACU,MAAO;;;;;;;;;CAA7B;AAWA,MAAMC,OAAO,GAAGX,MAAM,CAACY,MAAO;;;;CAA9B;;AAMA,SAASC,QAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAA+B;AAC7B,QAAM,CAACR,MAAD,EAASS,SAAT,IAAsBjB,QAAQ,CAAC,KAAD,CAApC;AACA,QAAMkB,GAAG,GAAGjB,MAAM,EAAlB;AAEA,QAAMkB,KAAK,GAAG,CACZ;AAAEC,IAAAA,QAAQ,EAAE,GAAZ;AAAiBC,IAAAA,IAAI,EAAE;AAAvB,GADY,EAEZ;AAAED,IAAAA,QAAQ,EAAE,GAAZ;AAAiBC,IAAAA,IAAI,EAAE;AAAvB,GAFY,EAGZ;AAAED,IAAAA,QAAQ,EAAE,GAAZ;AAAiBC,IAAAA,IAAI,EAAE;AAAvB,GAHY,CAAd;;AAMA,QAAMC,WAAW,GAAGC,CAAC,IAAI;AACvB,QAAIA,CAAC,CAACC,MAAF,CAASC,EAAT,KAAgB,SAApB,EAA+BR,SAAS,CAAC,CAACT,MAAF,CAAT;AAChC,GAFD;;AAIAJ,EAAAA,eAAe,CAACc,GAAD,EAAM,MAAM;AACzBD,IAAAA,SAAS,CAAC,KAAD,CAAT;AACD,GAFc,CAAf;AAIA,QAAMS,OAAO,GAAGP,KAAK,CAACQ,GAAN,CAAU,CAACC,CAAD,EAAIC,CAAJ,kBACxB,oBAAC,MAAD;AAAQ,IAAA,EAAE,EAAC,SAAX;AAAqB,IAAA,OAAO,EAAE,MAAMb,OAAO,CAACY,CAAC,CAACR,QAAH,CAA3C;AAAyD,IAAA,GAAG,EAAES,CAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,CAAC,CAACP,IADL,CADc,CAAhB;AAMA,sBACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,KAAK,CAACQ,GAAN,CAAUC,CAAC,iBACV;AAAQ,IAAA,KAAK,EAAEA,CAAC,CAACR,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4BQ,CAAC,CAACP,IAA9B,CADD,CADH,CADF;AAOD;;AAEDN,QAAQ,CAACe,SAAT,GAAqB;AACnBd,EAAAA,OAAO,EAAEb,SAAS,CAAC4B;AADA,CAArB,C,CAIA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA,eAAehB,QAAf","sourcesContent":["import React, { useState, useRef } from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nimport useClickOutside from '../../hooks/useClickOutside';\n\nconst BtnContainer = styled.div`\n  position: absolute;\n  top: 5rem;\n  right: 0;\n  border-radius: 7px 0 0 7px;\n  color: white;\n  background: black;\n  width: ${props => (props.isOpen ? '10rem' : '3rem')};\n  height: 8rem;\n  display: flex;\n  justify-content: ${props => (props.isOpen ? 'flex-start' : 'center')};\n  align-items: center;\n  cursor: pointer;\n  z-index: 3;\n\n  @media (max-width: 320px) {\n    top: 0;\n  }\n`;\n\nconst Span = styled.span`\n  display: inline-block;\n  transform: rotate(270deg);\n  letter-spacing: 4px;\n  font-size: 1.2rem;\n`;\n\nconst SubBtn = styled.button`\n  display: block;\n  background: transparent;\n  color: white;\n  font-size: 1rem;\n  font-weight: 700;\n  text-align: left;\n  cursor: pointer;\n  margin: 5px;\n`;\n\nconst Options = styled.select`\n  position: absolute;\n  top: 5rem;\n  right: 0;\n`;\n\nfunction TimerBtn({ onClick }) {\n  const [isOpen, setIsOpen] = useState(false);\n  const ref = useRef();\n\n  const times = [\n    { duration: 240, text: '4 min' },\n    { duration: 360, text: '6 min' },\n    { duration: 480, text: '8 min' },\n  ];\n\n  const handleClick = e => {\n    if (e.target.id !== 'timeBtn') setIsOpen(!isOpen);\n  };\n\n  useClickOutside(ref, () => {\n    setIsOpen(false);\n  });\n\n  const buttons = times.map((t, i) => (\n    <SubBtn id=\"timeBtn\" onClick={() => onClick(t.duration)} key={i}>\n      {t.text}\n    </SubBtn>\n  ));\n\n  return (\n    <Options>\n      {times.map(t => (\n        <option value={t.duration}>{t.text}</option>\n      ))}\n    </Options>\n  );\n}\n\nTimerBtn.propTypes = {\n  onClick: PropTypes.func,\n};\n\n// import React, { useState, useRef } from 'react';\n// import styled from 'styled-components';\n// import PropTypes from 'prop-types';\n\n// import useClickOutside from '../../hooks/useClickOutside';\n\n// const BtnContainer = styled.div`\n//   position: absolute;\n//   top: 5rem;\n//   right: 0;\n//   border-radius: 7px 0 0 7px;\n//   color: white;\n//   background: black;\n//   width: ${props => (props.isOpen ? '10rem' : '3rem')};\n//   height: 8rem;\n//   display: flex;\n//   justify-content: ${props => (props.isOpen ? 'flex-start' : 'center')};\n//   align-items: center;\n//   cursor: pointer;\n//   z-index: 3;\n\n//   @media (max-width: 320px) {\n//     top: 0;\n//   }\n// `;\n\n// const Span = styled.span`\n//   display: inline-block;\n//   transform: rotate(270deg);\n//   letter-spacing: 4px;\n//   font-size: 1.2rem;\n// `;\n\n// const SubBtn = styled.button`\n//   display: block;\n//   background: transparent;\n//   color: white;\n//   font-size: 1rem;\n//   font-weight: 700;\n//   text-align: left;\n//   cursor: pointer;\n//   margin: 5px;\n// `;\n\n// function TimerBtn({ onClick }) {\n//   const [isOpen, setIsOpen] = useState(false);\n//   const ref = useRef();\n\n//   const times = [\n//     { duration: 240, text: '4 min' },\n//     { duration: 360, text: '6 min' },\n//     { duration: 480, text: '8 min' },\n//   ];\n\n//   const handleClick = e => {\n//     if (e.target.id !== 'timeBtn') setIsOpen(!isOpen);\n//   };\n\n//   useClickOutside(ref, () => {\n//     setIsOpen(false);\n//   });\n\n//   const buttons = times.map((t, i) => (\n//     <SubBtn id=\"timeBtn\" onClick={() => onClick(t.duration)} key={i}>\n//       {t.text}\n//     </SubBtn>\n//   ));\n\n//   return (\n//     <BtnContainer onClick={handleClick} isOpen={isOpen} ref={ref}>\n//       <Span>TIMER</Span>\n//       {isOpen && <div>{buttons}</div>}\n//     </BtnContainer>\n//   );\n// }\n\n// TimerBtn.propTypes = {\n//   onClick: PropTypes.func,\n// };\n\nexport default TimerBtn;\n"]},"metadata":{},"sourceType":"module"}