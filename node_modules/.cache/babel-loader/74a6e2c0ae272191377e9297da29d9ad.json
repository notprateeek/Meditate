{"ast":null,"code":"var _jsxFileName = \"/Users/suyeonkang/Desktop/web development/Project/metta/src/containers/Theme/Theme.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { Container } from './ThemeStyles';\nimport { Title } from '../../style/style';\nimport ProgressBar from '../../components/ProgressBar/ProgressBar';\nimport TimerBtn from '../../components/Button/TimerBtn';\nimport PlayBtn from '../../components/Button/PlayBtn';\n\nfunction Theme(props) {\n  const {\n    url\n  } = props;\n  const [audio] = useState(new Audio(url));\n  const [playing, setPlaying] = useState(false);\n  const [duration, setDuration] = useState(2);\n  const [currentTime, setCurrentTime] = useState(0);\n  const textArr = ['No one saves us but ourselves', 'No one can and no one may', 'We ourselves must walk the path'];\n  const [currentIndex, setCurrentIndex] = useState(0);\n  console.log(currentIndex);\n  useEffect(() => {\n    const changeText = setInterval(() => {\n      setCurrentIndex(currentIndex + 1); //changeText();\n    }, 1500);\n  }); // Play audio\n\n  useEffect(() => {\n    playing ? audio.play() : audio.pause();\n  }, [playing, audio]);\n  useEffect(() => {\n    audio.addEventListener('ended', () => setPlaying(false));\n    return () => {\n      audio.removeEventListener('ended', () => setPlaying(false));\n    };\n  }, [audio]); //Update duration\n\n  useEffect(() => {\n    if (currentTime >= duration) return;\n\n    if (playing) {\n      const token = setTimeout(updateTime, 1000);\n      return function cleanUp() {\n        clearTimeout(token);\n      };\n    }\n  });\n\n  const handleClick = time => setDuration(time);\n\n  const handleToggle = () => setPlaying(!playing);\n\n  const updateTime = () => {\n    if (playing) setDuration(duration - 1);\n  }; // HERE\n\n\n  audio.ontimeupdate = () => {\n    //setCurrentTime(audio.currentTime);\n    if (currentTime > duration) {\n      audio.pause();\n      audio.currentTime = 0;\n      setPlaying(false);\n    }\n  };\n\n  if (currentTime >= duration) {\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/congraturation\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    size: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, \"No one save us but ourselves\"), /*#__PURE__*/React.createElement(ProgressBar, {\n    playing: playing,\n    duration: duration,\n    currentTime: Math.floor(currentTime),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(PlayBtn, {\n    playing: playing,\n    onClick: handleToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TimerBtn, {\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }), props.children);\n}\n\nexport default React.memo(Theme); // function Theme(props) {\n//   const { url } = props;\n//   const [audio] = useState(new Audio(url));\n//   const [playing, setPlaying] = useState(false);\n//   const [duration, setDuration] = useState(3);\n//   const [currentTime, setCurrentTime] = useState(0);\n//   // Play audio\n//   useEffect(() => {\n//     playing ? audio.play() : audio.pause();\n//   }, [playing, audio]);\n//   useEffect(() => {\n//     audio.addEventListener('ended', () => setPlaying(false));\n//     return () => {\n//       audio.removeEventListener('ended', () => setPlaying(false));\n//     };\n//   }, [audio]);\n//   //Update duration\n//   useEffect(() => {\n//     if (currentTime >= duration) return;\n//     if (playing) {\n//       const token = setTimeout(updateTime, 1000);\n//       return function cleanUp() {\n//         clearTimeout(token);\n//       };\n//     }\n//   });\n//   const handleClick = time => setDuration(time);\n//   const handleToggle = () => setPlaying(!playing);\n//   const updateTime = () => {\n//     if (playing) setDuration(duration - 1);\n//   };\n//   audio.ontimeupdate = () => {\n//     setCurrentTime(audio.currentTime);\n//     if (currentTime >= duration) {\n//       audio.pause();\n//       audio.currentTime = 0;\n//       setPlaying(false);\n//     }\n//   };\n//   if (currentTime >= duration) {\n//     return <Redirect to=\"/congraturation\" />;\n//   }\n//   return (\n//     <Container>\n//       <Title size=\"md\">No one save us but ourselves</Title>\n//       <ProgressBar\n//         playing={playing}\n//         duration={duration}\n//         currentTime={Math.floor(currentTime)}\n//       />\n//       <PlayBtn playing={playing} onClick={handleToggle} />\n//       <TimerBtn onClick={handleClick} />\n//       {props.children}\n//     </Container>\n//   );\n// }\n// export default React.memo(Theme);","map":{"version":3,"sources":["/Users/suyeonkang/Desktop/web development/Project/metta/src/containers/Theme/Theme.js"],"names":["React","useState","useEffect","Redirect","Container","Title","ProgressBar","TimerBtn","PlayBtn","Theme","props","url","audio","Audio","playing","setPlaying","duration","setDuration","currentTime","setCurrentTime","textArr","currentIndex","setCurrentIndex","console","log","changeText","setInterval","play","pause","addEventListener","removeEventListener","token","setTimeout","updateTime","cleanUp","clearTimeout","handleClick","time","handleToggle","ontimeupdate","Math","floor","children","memo"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Redirect } from 'react-router-dom';\n\nimport { Container } from './ThemeStyles';\nimport { Title } from '../../style/style';\nimport ProgressBar from '../../components/ProgressBar/ProgressBar';\nimport TimerBtn from '../../components/Button/TimerBtn';\nimport PlayBtn from '../../components/Button/PlayBtn';\n\nfunction Theme(props) {\n  const { url } = props;\n  const [audio] = useState(new Audio(url));\n  const [playing, setPlaying] = useState(false);\n  const [duration, setDuration] = useState(2);\n  const [currentTime, setCurrentTime] = useState(0);\n\n  const textArr = [\n    'No one saves us but ourselves',\n    'No one can and no one may',\n    'We ourselves must walk the path',\n  ];\n\n  const [currentIndex, setCurrentIndex] = useState(0);\n  console.log(currentIndex);\n\n  useEffect(() => {\n    const changeText = setInterval(() => {\n      setCurrentIndex(currentIndex + 1);\n      //changeText();\n    }, 1500);\n  });\n\n  // Play audio\n  useEffect(() => {\n    playing ? audio.play() : audio.pause();\n  }, [playing, audio]);\n\n  useEffect(() => {\n    audio.addEventListener('ended', () => setPlaying(false));\n    return () => {\n      audio.removeEventListener('ended', () => setPlaying(false));\n    };\n  }, [audio]);\n\n  //Update duration\n  useEffect(() => {\n    if (currentTime >= duration) return;\n    if (playing) {\n      const token = setTimeout(updateTime, 1000);\n\n      return function cleanUp() {\n        clearTimeout(token);\n      };\n    }\n  });\n\n  const handleClick = time => setDuration(time);\n  const handleToggle = () => setPlaying(!playing);\n  const updateTime = () => {\n    if (playing) setDuration(duration - 1);\n  };\n\n  // HERE\n  audio.ontimeupdate = () => {\n    //setCurrentTime(audio.currentTime);\n    if (currentTime > duration) {\n      audio.pause();\n      audio.currentTime = 0;\n      setPlaying(false);\n    }\n  };\n\n  if (currentTime >= duration) {\n    return <Redirect to=\"/congraturation\" />;\n  }\n\n  return (\n    <Container>\n      <Title size=\"md\">No one save us but ourselves</Title>\n      <ProgressBar\n        playing={playing}\n        duration={duration}\n        currentTime={Math.floor(currentTime)}\n      />\n      <PlayBtn playing={playing} onClick={handleToggle} />\n      <TimerBtn onClick={handleClick} />\n      {props.children}\n    </Container>\n  );\n}\n\nexport default React.memo(Theme);\n\n// function Theme(props) {\n//   const { url } = props;\n//   const [audio] = useState(new Audio(url));\n//   const [playing, setPlaying] = useState(false);\n//   const [duration, setDuration] = useState(3);\n//   const [currentTime, setCurrentTime] = useState(0);\n\n//   // Play audio\n//   useEffect(() => {\n//     playing ? audio.play() : audio.pause();\n//   }, [playing, audio]);\n\n//   useEffect(() => {\n//     audio.addEventListener('ended', () => setPlaying(false));\n//     return () => {\n//       audio.removeEventListener('ended', () => setPlaying(false));\n//     };\n//   }, [audio]);\n\n//   //Update duration\n//   useEffect(() => {\n//     if (currentTime >= duration) return;\n//     if (playing) {\n//       const token = setTimeout(updateTime, 1000);\n\n//       return function cleanUp() {\n//         clearTimeout(token);\n//       };\n//     }\n//   });\n\n//   const handleClick = time => setDuration(time);\n//   const handleToggle = () => setPlaying(!playing);\n//   const updateTime = () => {\n//     if (playing) setDuration(duration - 1);\n//   };\n\n//   audio.ontimeupdate = () => {\n//     setCurrentTime(audio.currentTime);\n\n//     if (currentTime >= duration) {\n//       audio.pause();\n//       audio.currentTime = 0;\n//       setPlaying(false);\n//     }\n//   };\n\n//   if (currentTime >= duration) {\n//     return <Redirect to=\"/congraturation\" />;\n//   }\n\n//   return (\n//     <Container>\n//       <Title size=\"md\">No one save us but ourselves</Title>\n//       <ProgressBar\n//         playing={playing}\n//         duration={duration}\n//         currentTime={Math.floor(currentTime)}\n//       />\n//       <PlayBtn playing={playing} onClick={handleToggle} />\n//       <TimerBtn onClick={handleClick} />\n//       {props.children}\n//     </Container>\n//   );\n// }\n\n// export default React.memo(Theme);\n"]},"metadata":{},"sourceType":"module"}