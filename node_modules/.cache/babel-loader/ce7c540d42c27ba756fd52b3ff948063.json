{"ast":null,"code":"var _jsxFileName = \"/Users/suyeonkang/Desktop/web development/Project/metta/src/components/theme/theme.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Container } from './themeStyles';\nimport { Title } from '../../style/style';\nimport ProgressBar from '../progressBar/progressBar';\nimport TimerBtn from '../button/TimerBtn';\nimport PlayBtn from '../button/playBtn';\n\nfunction Theme(props) {\n  const {\n    url\n  } = props;\n  const [audio] = useState(new Audio(url));\n  const [playing, setPlaying] = useState(false);\n  const [duration, setDuration] = useState(600);\n  const [currentTime] = useState(audio.currentTime); //const currentTime = audio.currentTime;\n  // Play audio\n  // useEffect(() => {\n  //   playing ? audio.play() : audio.pause();\n  // }, [playing, audio]);\n  // useEffect(() => {\n  //   audio.addEventListener('ended', () => setPlaying(false));\n  //   return () => {\n  //     audio.removeEventListener('ended', () => setPlaying(false));\n  //   };\n  // }, [audio]);\n  // //Update duration\n  // useEffect(() => {\n  //   if (currentTime > duration) return;\n  //   if (playing) {\n  //     const token = setTimeout(updateTime, 1000);\n  //     return function cleanUp() {\n  //       clearTimeout(token);\n  //     };\n  //   }\n  // });\n\n  const updateTime = () => {\n    if (playing) setDuration(duration - 1);\n  };\n\n  const handleClick = time => setDuration(time);\n\n  const handleToggle = () => setPlaying(!playing);\n\n  audio.ontimeupdate = () => {\n    useEffect(() => {\n      playing ? audio.play() : audio.pause();\n    }, [playing, audio]);\n    useEffect(() => {\n      audio.addEventListener('ended', () => setPlaying(false));\n      return () => {\n        audio.removeEventListener('ended', () => setPlaying(false));\n      };\n    }, [audio]); //Update duration\n\n    useEffect(() => {\n      if (currentTime > duration) return;\n\n      if (playing) {\n        const token = setTimeout(updateTime, 1000);\n        return function cleanUp() {\n          clearTimeout(token);\n        };\n      }\n    });\n\n    if (currentTime >= duration) {\n      audio.pause();\n      audio.currentTime = 0;\n      setPlaying(false);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    size: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, \"No one save us but ourselves\"), /*#__PURE__*/React.createElement(ProgressBar, {\n    playing: playing,\n    duration: duration,\n    currentTime: currentTime,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(PlayBtn, {\n    playing: playing,\n    onClick: handleToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TimerBtn, {\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }), props.children);\n} // // Container\n// function Theme(props) {\n//   const { url } = props;\n//   // const [audio] = useState(new Audio(url));\n//   // const [playing, setPlaying] = useState(false);\n//   // const [duration, setDuration] = useState(600);\n//   // const [currentTime, setCurrentTime] = useState(audio.currentTime);\n//   //const currentTime = audio.currentTime;\n//   //console.log(currentTime);\n//   const [state, setState] = useState({\n//     audio: new Audio(url),\n//     playing: false,\n//     duration: 600,\n//     currentTime: audio.currentTime,\n//   });\n//   const { audio, playing, duration, currentTime} = props;\n//   // Play audio\n//   useEffect(() => {\n//     playing ? audio.play() : audio.pause();\n//   }, [playing, audio]);\n//   useEffect(() => {\n//     audio.addEventListener('ended', () => setPlaying(false));\n//     return () => {\n//       audio.removeEventListener('ended', () => setPlaying(false));\n//     };\n//   }, [audio]);\n//   //Update duration\n//   useEffect(() => {\n//     const currentTime = audio.currentTime;\n//     if (currentTime > duration) return;\n//     if (playing) {\n//       const token = setTimeout(updateTime, 1000);\n//       return function cleanUp() {\n//         clearTimeout(token);\n//       };\n//     }\n//   });\n//   const updateTime = () => {\n//     if (playing) setDuration(duration - 1);\n//   };\n//   const handleClick = time => setDuration(time);\n//   const handleToggle = () => setPlaying(!playing);\n//   audio.ontimeupdate = () => {\n//     const currentTime = audio.currentTime;\n//     if (currentTime >= duration) {\n//       audio.pause();\n//       audio.currentTime = 0;\n//       setPlaying(false);\n//     }\n//   };\n//   return (\n//     <Container>\n//       <Title size=\"md\">No one save us but ourselves</Title>\n//       <ProgressBar\n//         playing={playing}\n//         duration={duration}\n//         //currentTime={currentTime}\n//         currentTime={audio.currentTime}\n//       />\n//       <PlayBtn playing={playing} onClick={handleToggle} />\n//       <TimerBtn onClick={handleClick} />\n//       {props.children}\n//     </Container>\n//   );\n// }\n// Original\n// function Theme(props) {\n//   const { url } = props;\n//   const [start, setStart] = useState(false);\n//   const [duration, setDuration] = useState({ min: 600, sec: 0 });\n//   const { min, sec } = duration;\n//   const displayTime = `${Math.floor(min / 60)}:${Math.floor(sec % 60)}`;\n//   const handleClick = time => {\n//     setDuration({ min: time, sec: 0 });\n//   };\n//   const handleToggle = () => {\n//     setStart(!start);\n//   };\n//   const updateTime = () => {\n//     if (start) {\n//       if (sec === 0) {\n//         setDuration({\n//           min: min - 1,\n//           sec: 59,\n//         });\n//       } else {\n//         setDuration({ ...duration, sec: sec - 1 });\n//       }\n//     }\n//   };\n//   useEffect(() => {\n//     if (start) {\n//       const token = setTimeout(updateTime, 1000);\n//       return function cleanUp() {\n//         clearTimeout(token);\n//       };\n//     }\n//   });\n//   return (\n//     <Container>\n//       <Title size=\"md\">No one save us but ourselves</Title>\n//       <ProgressBar duration={duration} displayTime={displayTime} />\n//       <FlexColDiv>\n//         <Player url={url} setStart={handleToggle} />\n//         <TimerBtn onClick={handleClick} />\n//       </FlexColDiv>\n//       {props.children}\n//     </Container>\n//   );\n// }\n\n\nexport default React.memo(Theme);","map":{"version":3,"sources":["/Users/suyeonkang/Desktop/web development/Project/metta/src/components/theme/theme.js"],"names":["React","useState","useEffect","Container","Title","ProgressBar","TimerBtn","PlayBtn","Theme","props","url","audio","Audio","playing","setPlaying","duration","setDuration","currentTime","updateTime","handleClick","time","handleToggle","ontimeupdate","play","pause","addEventListener","removeEventListener","token","setTimeout","cleanUp","clearTimeout","children","memo"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport { Container } from './themeStyles';\nimport { Title } from '../../style/style';\nimport ProgressBar from '../progressBar/progressBar';\nimport TimerBtn from '../button/TimerBtn';\nimport PlayBtn from '../button/playBtn';\n\nfunction Theme(props) {\n  const { url } = props;\n  const [audio] = useState(new Audio(url));\n  const [playing, setPlaying] = useState(false);\n  const [duration, setDuration] = useState(600);\n  const [currentTime] = useState(audio.currentTime);\n\n  //const currentTime = audio.currentTime;\n\n  // Play audio\n  // useEffect(() => {\n  //   playing ? audio.play() : audio.pause();\n  // }, [playing, audio]);\n\n  // useEffect(() => {\n  //   audio.addEventListener('ended', () => setPlaying(false));\n  //   return () => {\n  //     audio.removeEventListener('ended', () => setPlaying(false));\n  //   };\n  // }, [audio]);\n\n  // //Update duration\n  // useEffect(() => {\n  //   if (currentTime > duration) return;\n  //   if (playing) {\n  //     const token = setTimeout(updateTime, 1000);\n\n  //     return function cleanUp() {\n  //       clearTimeout(token);\n  //     };\n  //   }\n  // });\n\n  const updateTime = () => {\n    if (playing) setDuration(duration - 1);\n  };\n  const handleClick = time => setDuration(time);\n  const handleToggle = () => setPlaying(!playing);\n\n  audio.ontimeupdate = () => {\n    useEffect(() => {\n      playing ? audio.play() : audio.pause();\n    }, [playing, audio]);\n\n    useEffect(() => {\n      audio.addEventListener('ended', () => setPlaying(false));\n      return () => {\n        audio.removeEventListener('ended', () => setPlaying(false));\n      };\n    }, [audio]);\n\n    //Update duration\n    useEffect(() => {\n      if (currentTime > duration) return;\n      if (playing) {\n        const token = setTimeout(updateTime, 1000);\n\n        return function cleanUp() {\n          clearTimeout(token);\n        };\n      }\n    });\n\n    if (currentTime >= duration) {\n      audio.pause();\n      audio.currentTime = 0;\n      setPlaying(false);\n    }\n  };\n\n  return (\n    <Container>\n      <Title size=\"md\">No one save us but ourselves</Title>\n      <ProgressBar\n        playing={playing}\n        duration={duration}\n        currentTime={currentTime}\n      />\n      <PlayBtn playing={playing} onClick={handleToggle} />\n      <TimerBtn onClick={handleClick} />\n      {props.children}\n    </Container>\n  );\n}\n\n// // Container\n// function Theme(props) {\n//   const { url } = props;\n\n//   // const [audio] = useState(new Audio(url));\n//   // const [playing, setPlaying] = useState(false);\n//   // const [duration, setDuration] = useState(600);\n//   // const [currentTime, setCurrentTime] = useState(audio.currentTime);\n\n//   //const currentTime = audio.currentTime;\n//   //console.log(currentTime);\n\n//   const [state, setState] = useState({\n//     audio: new Audio(url),\n//     playing: false,\n//     duration: 600,\n//     currentTime: audio.currentTime,\n//   });\n\n//   const { audio, playing, duration, currentTime} = props;\n\n//   // Play audio\n//   useEffect(() => {\n//     playing ? audio.play() : audio.pause();\n//   }, [playing, audio]);\n\n//   useEffect(() => {\n//     audio.addEventListener('ended', () => setPlaying(false));\n//     return () => {\n//       audio.removeEventListener('ended', () => setPlaying(false));\n//     };\n//   }, [audio]);\n\n//   //Update duration\n//   useEffect(() => {\n//     const currentTime = audio.currentTime;\n\n//     if (currentTime > duration) return;\n//     if (playing) {\n//       const token = setTimeout(updateTime, 1000);\n\n//       return function cleanUp() {\n//         clearTimeout(token);\n//       };\n//     }\n//   });\n\n//   const updateTime = () => {\n//     if (playing) setDuration(duration - 1);\n//   };\n//   const handleClick = time => setDuration(time);\n//   const handleToggle = () => setPlaying(!playing);\n\n//   audio.ontimeupdate = () => {\n//     const currentTime = audio.currentTime;\n//     if (currentTime >= duration) {\n//       audio.pause();\n//       audio.currentTime = 0;\n//       setPlaying(false);\n//     }\n//   };\n\n//   return (\n//     <Container>\n//       <Title size=\"md\">No one save us but ourselves</Title>\n//       <ProgressBar\n//         playing={playing}\n//         duration={duration}\n//         //currentTime={currentTime}\n//         currentTime={audio.currentTime}\n//       />\n//       <PlayBtn playing={playing} onClick={handleToggle} />\n//       <TimerBtn onClick={handleClick} />\n//       {props.children}\n//     </Container>\n//   );\n// }\n\n// Original\n// function Theme(props) {\n//   const { url } = props;\n\n//   const [start, setStart] = useState(false);\n//   const [duration, setDuration] = useState({ min: 600, sec: 0 });\n//   const { min, sec } = duration;\n\n//   const displayTime = `${Math.floor(min / 60)}:${Math.floor(sec % 60)}`;\n\n//   const handleClick = time => {\n//     setDuration({ min: time, sec: 0 });\n//   };\n\n//   const handleToggle = () => {\n//     setStart(!start);\n//   };\n\n//   const updateTime = () => {\n//     if (start) {\n//       if (sec === 0) {\n//         setDuration({\n//           min: min - 1,\n//           sec: 59,\n//         });\n//       } else {\n//         setDuration({ ...duration, sec: sec - 1 });\n//       }\n//     }\n//   };\n\n//   useEffect(() => {\n//     if (start) {\n//       const token = setTimeout(updateTime, 1000);\n\n//       return function cleanUp() {\n//         clearTimeout(token);\n//       };\n//     }\n//   });\n\n//   return (\n//     <Container>\n//       <Title size=\"md\">No one save us but ourselves</Title>\n//       <ProgressBar duration={duration} displayTime={displayTime} />\n//       <FlexColDiv>\n//         <Player url={url} setStart={handleToggle} />\n//         <TimerBtn onClick={handleClick} />\n//       </FlexColDiv>\n//       {props.children}\n//     </Container>\n//   );\n// }\n\nexport default React.memo(Theme);\n"]},"metadata":{},"sourceType":"module"}