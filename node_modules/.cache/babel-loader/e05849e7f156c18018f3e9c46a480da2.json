{"ast":null,"code":"var _jsxFileName = \"/Users/suyeonkang/Desktop/web development/Project/metta/src/components/theme/theme.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Container, Timer } from './themeStyles';\nimport { Title, FlexColDiv } from '../../style/style';\nimport Player from '../../hooks/useAudio';\nimport ProgressBar from '../progressBar/progressBar';\nimport CircleProgressBarBase from '../circleProgressBar/CircleProgressBarBase'; // 600 (5min)\n// 600 - current\n\nfunction Theme(props) {\n  const {\n    url\n  } = props;\n  const [start, setStart] = useState(false);\n  const [timeTotal, setTimeTodal] = useState(60);\n  const [timeLeft, setTimeLeft] = useState(); //const displayTime = `${Math.floor(min / 60)}:${Math.floor(sec % 60)}`;\n\n  const handleClick = time => setTimeTodal(time);\n\n  const handleToggle = () => setStart(!start);\n\n  const updateTime = () => {\n    if (start && timeLeft) {\n      const current = timeLeft - 6;\n      setTimeLeft(current);\n    } else if (timeLeft === 0) {\n      setStart(false);\n    } else {\n      const current = timeTotal - 6;\n      setTimeLeft(current);\n    }\n  };\n\n  useEffect(() => {\n    if (start) {\n      const token = setTimeout(updateTime, 1000);\n      return function cleanUp() {\n        clearTimeout(token);\n      };\n    }\n  });\n  const displayTime = Math.floor(timeLeft / timeTotal * 100);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    size: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, \"No one save us but ourselves\"), /*#__PURE__*/React.createElement(CircleProgressBarBase, {\n    trailStrokeColor: \"gray\",\n    strokeColor: \"#8B37F5\",\n    percentage: displayTime,\n    innerText: \"complete\",\n    start: start,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(FlexColDiv, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Timer, {\n    size: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, displayTime), /*#__PURE__*/React.createElement(Player, {\n    url: url,\n    setStart: handleToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => handleClick(300),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, \"5 min\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => handleClick(600),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, \"10 min\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => handleClick(900),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, \"15 min\")), props.children);\n}\n\nexport default Theme; // function Theme(props) {\n//   const { url } = props;\n//   const [start, setStart] = useState(false);\n//   const [duration, setDuration] = useState({ min: 600, sec: 0 });\n//   const { min, sec } = duration;\n//   const displayTime = `${Math.floor(min / 60)}:${Math.floor(sec % 60)}`;\n//   const handleClick = time => {\n//     setDuration({ min: time, sec: 0 });\n//   };\n//   const handleToggle = () => {\n//     setStart(!start);\n//   };\n//   const updateTime = () => {\n//     if (start) {\n//       if (sec === 0) {\n//         setDuration({\n//           min: min - 1,\n//           sec: 59,\n//         });\n//       } else {\n//         setDuration({ ...duration, sec: sec - 1 });\n//       }\n//     }\n//   };\n//   useEffect(() => {\n//     if (start) {\n//       const token = setTimeout(updateTime, 1000);\n//       return function cleanUp() {\n//         clearTimeout(token);\n//       };\n//     }\n//   });\n//   /////\n//   // let currentTime = DOMstring.sound.currentTime;\n//   // // currentTIme: duration\n//   // let elapsed = duration - currentTime;\n//   // let seconds = Math.floor(elapsed % 60);\n//   // let minutes = Math.floor(elapsed / 60);\n//   // let progress = outlineLength - (currentTime / duration) * outlineLength;\n//   // DOMstring.outline.style.strokeDashoffset = progress;\n//   const time = min + sec;\n//   return (\n//     <Container>\n//       <Title size=\"md\">No one save us but ourselves</Title>\n//       {/* <ProgressBar duration={duration} /> */}\n//       <CircleProgressBarBase\n//         trailStrokeColor=\"gray\"\n//         strokeColor=\"#8B37F5\"\n//         percentage={time}\n//         innerText=\"complete\"\n//         start={start}\n//       />\n//       <FlexColDiv>\n//         <Timer size=\"sm\">{displayTime}</Timer>\n//         <Player url={url} setStart={handleToggle} />\n//         <button onClick={() => handleClick(300)}>5 min</button>\n//         <button onClick={() => handleClick(600)}>10 min</button>\n//         <button onClick={() => handleClick(900)}>15 min</button>\n//       </FlexColDiv>\n//       {props.children}\n//     </Container>\n//   );\n// }\n// export default Theme;\n// import React, { useState, useEffect } from 'react';\n// import { Container, Timer } from './themeStyles';\n// import { Title, FlexColDiv } from '../../style/style';\n// import Player from '../../hooks/useAudio';\n// import ProgressBar from '../progressBar/progressBar';\n// import CircleProgressBarBase from '../circleProgressBar/CircleProgressBarBase';\n// function Theme(props) {\n//   const { url } = props;\n//   const [start, setStart] = useState(false);\n//   const [duration, setDuration] = useState({ min: 600, sec: 0 });\n//   const { min, sec } = duration;\n//   const displayTime = `${Math.floor(min / 60)}:${Math.floor(sec % 60)}`;\n//   const handleClick = time => {\n//     setDuration({ min: time, sec: 0 });\n//   };\n//   const handleToggle = () => {\n//     setStart(!start);\n//   };\n//   const updateTime = () => {\n//     if (start) {\n//       if (sec === 0) {\n//         setDuration({\n//           min: min - 1,\n//           sec: 59,\n//         });\n//       } else {\n//         setDuration({ ...duration, sec: sec - 1 });\n//       }\n//     }\n//   };\n//   useEffect(() => {\n//     if (start) {\n//       const token = setTimeout(updateTime, 1000);\n//       return function cleanUp() {\n//         clearTimeout(token);\n//       };\n//     }\n//   });\n//   return (\n//     <Container>\n//       <Title size=\"md\">No one save us but ourselves</Title>\n//       {/* <ProgressBar duration={duration} /> */}\n//       <CircleProgressBarBase\n//         trailStrokeColor=\"gray\"\n//         strokeColor=\"teal\"\n//         percentage={75}\n//         innerText=\"complete\"\n//       />\n//       <FlexColDiv>\n//         <Timer size=\"sm\">{displayTime}</Timer>\n//         <Player url={url} setStart={handleToggle} />\n//         <button onClick={() => handleClick(300)}>5 min</button>\n//         <button onClick={() => handleClick(600)}>10 min</button>\n//         <button onClick={() => handleClick(900)}>15 min</button>\n//       </FlexColDiv>\n//       {props.children}\n//     </Container>\n//   );\n// }\n// export default Theme;","map":{"version":3,"sources":["/Users/suyeonkang/Desktop/web development/Project/metta/src/components/theme/theme.js"],"names":["React","useState","useEffect","Container","Timer","Title","FlexColDiv","Player","ProgressBar","CircleProgressBarBase","Theme","props","url","start","setStart","timeTotal","setTimeTodal","timeLeft","setTimeLeft","handleClick","time","handleToggle","updateTime","current","token","setTimeout","cleanUp","clearTimeout","displayTime","Math","floor","children"],"mappings":"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":["import React, { useState, useEffect } from 'react';\n\nimport { Container, Timer } from './themeStyles';\nimport { Title, FlexColDiv } from '../../style/style';\nimport Player from '../../hooks/useAudio';\nimport ProgressBar from '../progressBar/progressBar';\n\nimport CircleProgressBarBase from '../circleProgressBar/CircleProgressBarBase';\n\n// 600 (5min)\n// 600 - current\nfunction Theme(props) {\n  const { url } = props;\n\n  const [start, setStart] = useState(false);\n  const [timeTotal, setTimeTodal] = useState(60);\n  const [timeLeft, setTimeLeft] = useState();\n\n  //const displayTime = `${Math.floor(min / 60)}:${Math.floor(sec % 60)}`;\n\n  const handleClick = time => setTimeTodal(time);\n  const handleToggle = () => setStart(!start);\n\n  const updateTime = () => {\n    if (start && timeLeft) {\n      const current = timeLeft - 6;\n      setTimeLeft(current);\n    } else if (timeLeft === 0) {\n      setStart(false);\n    } else {\n      const current = timeTotal - 6;\n      setTimeLeft(current);\n    }\n  };\n\n  useEffect(() => {\n    if (start) {\n      const token = setTimeout(updateTime, 1000);\n\n      return function cleanUp() {\n        clearTimeout(token);\n      };\n    }\n  });\n\n  const displayTime = Math.floor((timeLeft / timeTotal) * 100);\n\n  return (\n    <Container>\n      <Title size=\"md\">No one save us but ourselves</Title>\n      {/* <ProgressBar duration={duration} /> */}\n      <CircleProgressBarBase\n        trailStrokeColor=\"gray\"\n        strokeColor=\"#8B37F5\"\n        percentage={displayTime}\n        innerText=\"complete\"\n        start={start}\n      />\n\n      <FlexColDiv>\n        <Timer size=\"sm\">{displayTime}</Timer>\n        <Player url={url} setStart={handleToggle} />\n\n        <button onClick={() => handleClick(300)}>5 min</button>\n        <button onClick={() => handleClick(600)}>10 min</button>\n        <button onClick={() => handleClick(900)}>15 min</button>\n      </FlexColDiv>\n      {props.children}\n    </Container>\n  );\n}\n\nexport default Theme;\n\n// function Theme(props) {\n//   const { url } = props;\n\n//   const [start, setStart] = useState(false);\n//   const [duration, setDuration] = useState({ min: 600, sec: 0 });\n//   const { min, sec } = duration;\n\n//   const displayTime = `${Math.floor(min / 60)}:${Math.floor(sec % 60)}`;\n\n//   const handleClick = time => {\n//     setDuration({ min: time, sec: 0 });\n//   };\n\n//   const handleToggle = () => {\n//     setStart(!start);\n//   };\n\n//   const updateTime = () => {\n//     if (start) {\n//       if (sec === 0) {\n//         setDuration({\n//           min: min - 1,\n//           sec: 59,\n//         });\n//       } else {\n//         setDuration({ ...duration, sec: sec - 1 });\n//       }\n//     }\n//   };\n\n//   useEffect(() => {\n//     if (start) {\n//       const token = setTimeout(updateTime, 1000);\n\n//       return function cleanUp() {\n//         clearTimeout(token);\n//       };\n//     }\n//   });\n\n//   /////\n//   // let currentTime = DOMstring.sound.currentTime;\n//   // // currentTIme: duration\n//   // let elapsed = duration - currentTime;\n//   // let seconds = Math.floor(elapsed % 60);\n//   // let minutes = Math.floor(elapsed / 60);\n//   // let progress = outlineLength - (currentTime / duration) * outlineLength;\n//   // DOMstring.outline.style.strokeDashoffset = progress;\n//   const time = min + sec;\n\n//   return (\n//     <Container>\n//       <Title size=\"md\">No one save us but ourselves</Title>\n//       {/* <ProgressBar duration={duration} /> */}\n//       <CircleProgressBarBase\n//         trailStrokeColor=\"gray\"\n//         strokeColor=\"#8B37F5\"\n//         percentage={time}\n//         innerText=\"complete\"\n//         start={start}\n//       />\n\n//       <FlexColDiv>\n//         <Timer size=\"sm\">{displayTime}</Timer>\n//         <Player url={url} setStart={handleToggle} />\n\n//         <button onClick={() => handleClick(300)}>5 min</button>\n//         <button onClick={() => handleClick(600)}>10 min</button>\n//         <button onClick={() => handleClick(900)}>15 min</button>\n//       </FlexColDiv>\n//       {props.children}\n//     </Container>\n//   );\n// }\n\n// export default Theme;\n\n// import React, { useState, useEffect } from 'react';\n\n// import { Container, Timer } from './themeStyles';\n// import { Title, FlexColDiv } from '../../style/style';\n// import Player from '../../hooks/useAudio';\n// import ProgressBar from '../progressBar/progressBar';\n\n// import CircleProgressBarBase from '../circleProgressBar/CircleProgressBarBase';\n\n// function Theme(props) {\n//   const { url } = props;\n\n//   const [start, setStart] = useState(false);\n//   const [duration, setDuration] = useState({ min: 600, sec: 0 });\n//   const { min, sec } = duration;\n\n//   const displayTime = `${Math.floor(min / 60)}:${Math.floor(sec % 60)}`;\n\n//   const handleClick = time => {\n//     setDuration({ min: time, sec: 0 });\n//   };\n\n//   const handleToggle = () => {\n//     setStart(!start);\n//   };\n\n//   const updateTime = () => {\n//     if (start) {\n//       if (sec === 0) {\n//         setDuration({\n//           min: min - 1,\n//           sec: 59,\n//         });\n//       } else {\n//         setDuration({ ...duration, sec: sec - 1 });\n//       }\n//     }\n//   };\n\n//   useEffect(() => {\n//     if (start) {\n//       const token = setTimeout(updateTime, 1000);\n\n//       return function cleanUp() {\n//         clearTimeout(token);\n//       };\n//     }\n//   });\n\n//   return (\n//     <Container>\n//       <Title size=\"md\">No one save us but ourselves</Title>\n//       {/* <ProgressBar duration={duration} /> */}\n//       <CircleProgressBarBase\n//         trailStrokeColor=\"gray\"\n//         strokeColor=\"teal\"\n//         percentage={75}\n//         innerText=\"complete\"\n//       />\n\n//       <FlexColDiv>\n//         <Timer size=\"sm\">{displayTime}</Timer>\n//         <Player url={url} setStart={handleToggle} />\n\n//         <button onClick={() => handleClick(300)}>5 min</button>\n//         <button onClick={() => handleClick(600)}>10 min</button>\n//         <button onClick={() => handleClick(900)}>15 min</button>\n//       </FlexColDiv>\n//       {props.children}\n//     </Container>\n//   );\n// }\n\n// export default Theme;\n"]},"metadata":{},"sourceType":"module"}